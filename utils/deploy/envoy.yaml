apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: envoy
  name: envoy
data:
  envoy.yaml: |
    static_resources:
      clusters:
        - name: authorino_wasm
          connect_timeout: 1s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http2_protocol_options: { }
          load_assignment:
            cluster_name: authorino_wasm
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: authorino-authorino-authorization
                          port_value: 50051
        - name: limitador
          connect_timeout: 1s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http2_protocol_options: { }
          load_assignment:
            cluster_name: limitador
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: limitador-limitador
                          port_value: 8081
        - name: talker-api
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: talker-api
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: talker-api
                          port_value: 3000
        - name: talker-web
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: talker-web
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: talker-web
                          port_value: 8888
        - name: opentelemetry
          connect_timeout: 0.25s
          type: STRICT_DNS
          lb_policy: ROUND_ROBIN
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http2_protocol_options: { }
          load_assignment:
            cluster_name: opentelemetry
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: otel-collector
                          port_value: 4317
      listeners:
        - address:
            socket_address:
              address: 0.0.0.0
              port_value: 8000
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: local
                    use_remote_address: true
                    xff_num_trusted_hops: 1
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains: [ '*' ]
                          routes:
                            - match: { prefix: / }
                              route:
                                cluster: talker-api
                    http_filters:
                      - name: envoy.filters.http.header_to_metadata
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.header_to_metadata.v3.Config
                          request_rules:
                            - header: x-dyn-user-id
                              on_header_present:
                                key: user_id
                                type: STRING
                              remove: false
                      - name: envoy.filters.http.wasm
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
                          config:
                            name: kuadrant_wasm
                            root_id: kuadrant_wasm
                            vm_config:
                              vm_id: vm.sentinel.kuadrant_wasm
                              runtime: envoy.wasm.runtime.v8
                              code:
                                local:
                                  filename: /opt/kuadrant/wasm/wasm_shim.wasm
                              allow_precompiled: true
                            configuration:
                              "@type": "type.googleapis.com/google.protobuf.StringValue"
                              value: >
                                {
                                  "services": {
                                    "authorino": {
                                      "type": "auth",
                                      "endpoint": "authorino_wasm",
                                      "failureMode": "deny"
                                    },
                                    "limitador": {
                                      "type": "ratelimit",
                                      "endpoint": "limitador",
                                      "failureMode": "deny"
                                    }
                                  },
                                  "actionSets": [
                                    {
                                      "name": "auth-ns-A/auth-name-A",
                                      "routeRuleConditions": {
                                        "hostnames": [
                                          "*.a.auth.com"
                                        ],
                                        "predicates": [
                                          "request.path == '/get'"
                                        ]
                                      },
                                      "actions": [
                                        {
                                          "service": "authorino",
                                          "scope": "effective-route-1"
                                        }
                                      ]
                                    },
                                    {
                                      "name": "rlp-ns-A/rlp-name-A",
                                      "routeRuleConditions": {
                                        "hostnames": [
                                          "*.a.rlp.com"
                                        ]
                                      },
                                      "actions": [
                                        {
                                          "service": "limitador",
                                          "scope": "rlp-ns-A/rlp-name-A",
                                          "data": [
                                            {
                                              "expression": {
                                                "key": "unknown.path",
                                                "value": "unknown.path"
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "name": "rlp-ns-B/rlp-name-B",
                                      "routeRuleConditions": {
                                        "hostnames": [
                                          "*.b.rlp.com"
                                        ],
                                        "predicates": [
                                          "request.url_path.startsWith('/unknown-path')"
                                        ]
                                      },
                                      "actions": [
                                        {
                                          "service": "limitador",
                                          "scope": "rlp-ns-B/rlp-name-B",
                                          "data": [
                                            {
                                              "expression": {
                                                "key": "rlp-ns-B/rlp-name-B/limit-not-to-be-activated",
                                                "value": "1"
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "name": "rlp-ns-C/rlp-name-C",
                                      "routeRuleConditions": {
                                        "hostnames": [
                                          "*.c.rlp.com"
                                        ],
                                        "predicates": [
                                          "request.url_path.startsWith('/get')",
                                          "request.host == 'test.c.rlp.com'",
                                          "request.method == 'GET'"
                                        ]
                                      },
                                      "actions": [
                                        {
                                          "service": "limitador",
                                          "scope": "rlp-ns-C/rlp-name-C",
                                          "data": [
                                            {
                                              "expression": {
                                                "key": "limit_to_be_activated",
                                                "value": "1"
                                              }
                                            },
                                            {
                                              "expression": {
                                                "key": "source.address",
                                                "value": "source.address"
                                              }
                                            },
                                            {
                                              "expression": {
                                                "key": "request.headers['my-custom-header-01']",
                                                "value": "request.headers['my-custom-header-01']"
                                              }
                                            },
                                            {
                                              "expression": {
                                                "key": "user_id",
                                                "value": "string(getHostProperty(['metadata', 'filter_metadata', 'envoy.filters.http.header_to_metadata', 'user_id']))"
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "name": "rlp-ns-D/rlp-name-D",
                                      "routeRuleConditions": {
                                        "hostnames": [
                                          "*.d.rlp.com"
                                        ],
                                        "predicates": [
                                          "source.remote_address != '50.0.0.1'"
                                        ]
                                      },
                                      "actions": [
                                        {
                                          "service": "limitador",
                                          "scope": "rlp-ns-D/rlp-name-D",
                                          "data": [
                                          ],
                                          "actions": [
                                            {
                                              "extension": "limitador",
                                              "scope": "rlp-ns-D/rlp-name-D",
                                              "data": [
                                                {
                                                  "expression": {
                                                    "key": "source.remote_address",
                                                    "value": "source.remote_address"
                                                  }
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "name": "multi-ns-A/multi-name-A",
                                      "routeRuleConditions": {
                                        "hostnames": [
                                          "*.a.multi.com"
                                        ],
                                        "predicates": [
                                          "request.path == '/get'"
                                        ]
                                      },
                                      "actions": [
                                        {
                                          "service": "authorino",
                                          "scope": "effective-route-1"
                                        },
                                        {
                                          "service": "limitador",
                                          "scope": "multi-ns-A/multi-name-A",
                                          "data": [
                                            {
                                              "expression": {
                                                "key": "user_id",
                                                "value": "auth.identity.userid"
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "name": "multi-ns-B/multi-name-B",
                                      "routeRuleConditions": {
                                        "hostnames": [
                                          "*.b.multi.com"
                                        ],
                                        "predicates": [
                                          "request.path == '/get'"
                                        ]
                                      },
                                      "actions": [
                                        {
                                          "service": "authorino",
                                          "scope": "effective-route-1"
                                        },
                                        {
                                          "service": "limitador",
                                          "scope": "multi-ns-B/multi-name-B",
                                          "predicates": [
                                            "auth.identity.userid == 'alice'"
                                          ],
                                          "data": [
                                            {
                                              "expression": {
                                                "key": "user_id",
                                                "value": "alice"
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

                    # # Uncomment to enable tracing
                    # tracing:
                    #   provider:
                    #     name: envoy.tracers.opentelemetry
                    #     typed_config:
                    #       "@type": type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig
                    #       grpc_service:
                    #         envoy_grpc:
                    #           cluster_name: opentelemetry
                    #         timeout: 1s
                    #       service_name: envoy
    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: envoy
  name: envoy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy
  template:
    metadata:
      labels:
        app: envoy
    spec:
      containers:
        - args:
            - --config-path /usr/local/etc/envoy/envoy.yaml
            - --service-cluster front-proxy
            - --log-level info
            - --component-log-level wasm:debug,filter:trace,http:debug,router:debug
          command:
            - /usr/local/bin/envoy
          image: envoyproxy/envoy:v1.31-latest
          name: envoy
          ports:
            - containerPort: 8000
              name: web
            - containerPort: 8001
              name: admin
          volumeMounts:
            - mountPath: /usr/local/etc/envoy
              name: config
              readOnly: true
            - mountPath: /opt/kuadrant/wasm
              name: wasm
      volumes:
        - configMap:
            items:
              - key: envoy.yaml
                path: envoy.yaml
            name: envoy
          name: config
        - name: wasm
          hostPath:
            path: /opt/kuadrant/wasm
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: envoy
  name: envoy
spec:
  ports:
    - name: web
      port: 8000
      protocol: TCP
  selector:
    app: envoy
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-wildcard-host
spec:
  rules:
    - host: talker-api.127.0.0.1.nip.io
      http:
        paths:
          - backend:
              service:
                name: envoy
                port:
                  number: 8000
            path: /
            pathType: Prefix
