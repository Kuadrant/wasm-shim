// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/type/v3/percent.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Percent {
    // message fields
    pub value: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Percent {
    fn default() -> &'a Percent {
        <Percent as ::protobuf::Message>::default_instance()
    }
}

impl Percent {
    pub fn new() -> Percent {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }
}

impl ::protobuf::Message for Percent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Percent {
        Percent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &Percent| { &m.value },
                |m: &mut Percent| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Percent>(
                "Percent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Percent {
        static instance: ::protobuf::rt::LazyV2<Percent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Percent::new)
    }
}

impl ::protobuf::Clear for Percent {
    fn clear(&mut self) {
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Percent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Percent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FractionalPercent {
    // message fields
    pub numerator: u32,
    pub denominator: FractionalPercent_DenominatorType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FractionalPercent {
    fn default() -> &'a FractionalPercent {
        <FractionalPercent as ::protobuf::Message>::default_instance()
    }
}

impl FractionalPercent {
    pub fn new() -> FractionalPercent {
        ::std::default::Default::default()
    }

    // uint32 numerator = 1;


    pub fn get_numerator(&self) -> u32 {
        self.numerator
    }
    pub fn clear_numerator(&mut self) {
        self.numerator = 0;
    }

    // Param is passed by value, moved
    pub fn set_numerator(&mut self, v: u32) {
        self.numerator = v;
    }

    // .envoy.type.v3.FractionalPercent.DenominatorType denominator = 2;


    pub fn get_denominator(&self) -> FractionalPercent_DenominatorType {
        self.denominator
    }
    pub fn clear_denominator(&mut self) {
        self.denominator = FractionalPercent_DenominatorType::HUNDRED;
    }

    // Param is passed by value, moved
    pub fn set_denominator(&mut self, v: FractionalPercent_DenominatorType) {
        self.denominator = v;
    }
}

impl ::protobuf::Message for FractionalPercent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.numerator = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.denominator, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.numerator != 0 {
            my_size += ::protobuf::rt::value_size(1, self.numerator, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.denominator != FractionalPercent_DenominatorType::HUNDRED {
            my_size += ::protobuf::rt::enum_size(2, self.denominator);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.numerator != 0 {
            os.write_uint32(1, self.numerator)?;
        }
        if self.denominator != FractionalPercent_DenominatorType::HUNDRED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.denominator))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FractionalPercent {
        FractionalPercent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "numerator",
                |m: &FractionalPercent| { &m.numerator },
                |m: &mut FractionalPercent| { &mut m.numerator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FractionalPercent_DenominatorType>>(
                "denominator",
                |m: &FractionalPercent| { &m.denominator },
                |m: &mut FractionalPercent| { &mut m.denominator },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FractionalPercent>(
                "FractionalPercent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FractionalPercent {
        static instance: ::protobuf::rt::LazyV2<FractionalPercent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FractionalPercent::new)
    }
}

impl ::protobuf::Clear for FractionalPercent {
    fn clear(&mut self) {
        self.numerator = 0;
        self.denominator = FractionalPercent_DenominatorType::HUNDRED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FractionalPercent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FractionalPercent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FractionalPercent_DenominatorType {
    HUNDRED = 0,
    TEN_THOUSAND = 1,
    MILLION = 2,
}

impl ::protobuf::ProtobufEnum for FractionalPercent_DenominatorType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FractionalPercent_DenominatorType> {
        match value {
            0 => ::std::option::Option::Some(FractionalPercent_DenominatorType::HUNDRED),
            1 => ::std::option::Option::Some(FractionalPercent_DenominatorType::TEN_THOUSAND),
            2 => ::std::option::Option::Some(FractionalPercent_DenominatorType::MILLION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FractionalPercent_DenominatorType] = &[
            FractionalPercent_DenominatorType::HUNDRED,
            FractionalPercent_DenominatorType::TEN_THOUSAND,
            FractionalPercent_DenominatorType::MILLION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FractionalPercent_DenominatorType>("FractionalPercent.DenominatorType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FractionalPercent_DenominatorType {
}

impl ::std::default::Default for FractionalPercent_DenominatorType {
    fn default() -> Self {
        FractionalPercent_DenominatorType::HUNDRED
    }
}

impl ::protobuf::reflect::ProtobufValue for FractionalPercent_DenominatorType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1benvoy/type/v3/percent.proto\x12\renvoy.type.v3\x1a\x1dudpa/annotat\
    ions/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/\
    validate.proto\"S\n\x07Percent\x12-\n\x05value\x18\x01\x20\x01(\x01R\x05\
    valueB\x17\xfaB\x14\x12\x12\x19\0\0\0\0\0\0Y@)\0\0\0\0\0\0\0\0:\x19\x9a\
    \xc5\x88\x1e\x14\n\x12envoy.type.Percent\"\xf3\x01\n\x11FractionalPercen\
    t\x12\x1c\n\tnumerator\x18\x01\x20\x01(\rR\tnumerator\x12\\\n\x0bdenomin\
    ator\x18\x02\x20\x01(\x0e20.envoy.type.v3.FractionalPercent.DenominatorT\
    ypeR\x0bdenominatorB\x08\xfaB\x05\x82\x01\x02\x10\x01\"=\n\x0fDenominato\
    rType\x12\x0b\n\x07HUNDRED\x10\0\x12\x10\n\x0cTEN_THOUSAND\x10\x01\x12\
    \x0b\n\x07MILLION\x10\x02:#\x9a\xc5\x88\x1e\x1e\n\x1cenvoy.type.Fraction\
    alPercentB5\n\x1bio.envoyproxy.envoy.type.v3B\x0cPercentProtoP\x01\xba\
    \x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
