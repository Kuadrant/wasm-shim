// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/core/v3/address.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Pipe {
    // message fields
    pub path: ::std::string::String,
    pub mode: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Pipe {
    fn default() -> &'a Pipe {
        <Pipe as ::protobuf::Message>::default_instance()
    }
}

impl Pipe {
    pub fn new() -> Pipe {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // uint32 mode = 2;


    pub fn get_mode(&self) -> u32 {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = 0;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: u32) {
        self.mode = v;
    }
}

impl ::protobuf::Message for Pipe {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.mode = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if self.mode != 0 {
            my_size += ::protobuf::rt::value_size(2, self.mode, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if self.mode != 0 {
            os.write_uint32(2, self.mode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Pipe {
        Pipe::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &Pipe| { &m.path },
                |m: &mut Pipe| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "mode",
                |m: &Pipe| { &m.mode },
                |m: &mut Pipe| { &mut m.mode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Pipe>(
                "Pipe",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Pipe {
        static instance: ::protobuf::rt::LazyV2<Pipe> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Pipe::new)
    }
}

impl ::protobuf::Clear for Pipe {
    fn clear(&mut self) {
        self.path.clear();
        self.mode = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Pipe {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pipe {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnvoyInternalAddress {
    // message oneof groups
    pub address_name_specifier: ::std::option::Option<EnvoyInternalAddress_oneof_address_name_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnvoyInternalAddress {
    fn default() -> &'a EnvoyInternalAddress {
        <EnvoyInternalAddress as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum EnvoyInternalAddress_oneof_address_name_specifier {
    server_listener_name(::std::string::String),
}

impl EnvoyInternalAddress {
    pub fn new() -> EnvoyInternalAddress {
        ::std::default::Default::default()
    }

    // string server_listener_name = 1;


    pub fn get_server_listener_name(&self) -> &str {
        match self.address_name_specifier {
            ::std::option::Option::Some(EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_server_listener_name(&mut self) {
        self.address_name_specifier = ::std::option::Option::None;
    }

    pub fn has_server_listener_name(&self) -> bool {
        match self.address_name_specifier {
            ::std::option::Option::Some(EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_server_listener_name(&mut self, v: ::std::string::String) {
        self.address_name_specifier = ::std::option::Option::Some(EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_server_listener_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(_)) = self.address_name_specifier {
        } else {
            self.address_name_specifier = ::std::option::Option::Some(EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(::std::string::String::new()));
        }
        match self.address_name_specifier {
            ::std::option::Option::Some(EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_server_listener_name(&mut self) -> ::std::string::String {
        if self.has_server_listener_name() {
            match self.address_name_specifier.take() {
                ::std::option::Option::Some(EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for EnvoyInternalAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.address_name_specifier = ::std::option::Option::Some(EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.address_name_specifier {
            match v {
                &EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.address_name_specifier {
            match v {
                &EnvoyInternalAddress_oneof_address_name_specifier::server_listener_name(ref v) => {
                    os.write_string(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnvoyInternalAddress {
        EnvoyInternalAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "server_listener_name",
                EnvoyInternalAddress::has_server_listener_name,
                EnvoyInternalAddress::get_server_listener_name,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EnvoyInternalAddress>(
                "EnvoyInternalAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EnvoyInternalAddress {
        static instance: ::protobuf::rt::LazyV2<EnvoyInternalAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EnvoyInternalAddress::new)
    }
}

impl ::protobuf::Clear for EnvoyInternalAddress {
    fn clear(&mut self) {
        self.address_name_specifier = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnvoyInternalAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnvoyInternalAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SocketAddress {
    // message fields
    pub protocol: SocketAddress_Protocol,
    pub address: ::std::string::String,
    pub resolver_name: ::std::string::String,
    pub ipv4_compat: bool,
    // message oneof groups
    pub port_specifier: ::std::option::Option<SocketAddress_oneof_port_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SocketAddress {
    fn default() -> &'a SocketAddress {
        <SocketAddress as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SocketAddress_oneof_port_specifier {
    port_value(u32),
    named_port(::std::string::String),
}

impl SocketAddress {
    pub fn new() -> SocketAddress {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.SocketAddress.Protocol protocol = 1;


    pub fn get_protocol(&self) -> SocketAddress_Protocol {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = SocketAddress_Protocol::TCP;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: SocketAddress_Protocol) {
        self.protocol = v;
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // uint32 port_value = 3;


    pub fn get_port_value(&self) -> u32 {
        match self.port_specifier {
            ::std::option::Option::Some(SocketAddress_oneof_port_specifier::port_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_port_value(&mut self) {
        self.port_specifier = ::std::option::Option::None;
    }

    pub fn has_port_value(&self) -> bool {
        match self.port_specifier {
            ::std::option::Option::Some(SocketAddress_oneof_port_specifier::port_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_port_value(&mut self, v: u32) {
        self.port_specifier = ::std::option::Option::Some(SocketAddress_oneof_port_specifier::port_value(v))
    }

    // string named_port = 4;


    pub fn get_named_port(&self) -> &str {
        match self.port_specifier {
            ::std::option::Option::Some(SocketAddress_oneof_port_specifier::named_port(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_named_port(&mut self) {
        self.port_specifier = ::std::option::Option::None;
    }

    pub fn has_named_port(&self) -> bool {
        match self.port_specifier {
            ::std::option::Option::Some(SocketAddress_oneof_port_specifier::named_port(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_named_port(&mut self, v: ::std::string::String) {
        self.port_specifier = ::std::option::Option::Some(SocketAddress_oneof_port_specifier::named_port(v))
    }

    // Mutable pointer to the field.
    pub fn mut_named_port(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SocketAddress_oneof_port_specifier::named_port(_)) = self.port_specifier {
        } else {
            self.port_specifier = ::std::option::Option::Some(SocketAddress_oneof_port_specifier::named_port(::std::string::String::new()));
        }
        match self.port_specifier {
            ::std::option::Option::Some(SocketAddress_oneof_port_specifier::named_port(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_named_port(&mut self) -> ::std::string::String {
        if self.has_named_port() {
            match self.port_specifier.take() {
                ::std::option::Option::Some(SocketAddress_oneof_port_specifier::named_port(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string resolver_name = 5;


    pub fn get_resolver_name(&self) -> &str {
        &self.resolver_name
    }
    pub fn clear_resolver_name(&mut self) {
        self.resolver_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_resolver_name(&mut self, v: ::std::string::String) {
        self.resolver_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resolver_name(&mut self) -> &mut ::std::string::String {
        &mut self.resolver_name
    }

    // Take field
    pub fn take_resolver_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resolver_name, ::std::string::String::new())
    }

    // bool ipv4_compat = 6;


    pub fn get_ipv4_compat(&self) -> bool {
        self.ipv4_compat
    }
    pub fn clear_ipv4_compat(&mut self) {
        self.ipv4_compat = false;
    }

    // Param is passed by value, moved
    pub fn set_ipv4_compat(&mut self, v: bool) {
        self.ipv4_compat = v;
    }
}

impl ::protobuf::Message for SocketAddress {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.port_specifier = ::std::option::Option::Some(SocketAddress_oneof_port_specifier::port_value(is.read_uint32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.port_specifier = ::std::option::Option::Some(SocketAddress_oneof_port_specifier::named_port(is.read_string()?));
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resolver_name)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ipv4_compat = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.protocol != SocketAddress_Protocol::TCP {
            my_size += ::protobuf::rt::enum_size(1, self.protocol);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if !self.resolver_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.resolver_name);
        }
        if self.ipv4_compat != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.port_specifier {
            match v {
                &SocketAddress_oneof_port_specifier::port_value(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &SocketAddress_oneof_port_specifier::named_port(ref v) => {
                    my_size += ::protobuf::rt::string_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.protocol != SocketAddress_Protocol::TCP {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if !self.resolver_name.is_empty() {
            os.write_string(5, &self.resolver_name)?;
        }
        if self.ipv4_compat != false {
            os.write_bool(6, self.ipv4_compat)?;
        }
        if let ::std::option::Option::Some(ref v) = self.port_specifier {
            match v {
                &SocketAddress_oneof_port_specifier::port_value(v) => {
                    os.write_uint32(3, v)?;
                },
                &SocketAddress_oneof_port_specifier::named_port(ref v) => {
                    os.write_string(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SocketAddress {
        SocketAddress::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SocketAddress_Protocol>>(
                "protocol",
                |m: &SocketAddress| { &m.protocol },
                |m: &mut SocketAddress| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &SocketAddress| { &m.address },
                |m: &mut SocketAddress| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "port_value",
                SocketAddress::has_port_value,
                SocketAddress::get_port_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "named_port",
                SocketAddress::has_named_port,
                SocketAddress::get_named_port,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resolver_name",
                |m: &SocketAddress| { &m.resolver_name },
                |m: &mut SocketAddress| { &mut m.resolver_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ipv4_compat",
                |m: &SocketAddress| { &m.ipv4_compat },
                |m: &mut SocketAddress| { &mut m.ipv4_compat },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SocketAddress>(
                "SocketAddress",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SocketAddress {
        static instance: ::protobuf::rt::LazyV2<SocketAddress> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SocketAddress::new)
    }
}

impl ::protobuf::Clear for SocketAddress {
    fn clear(&mut self) {
        self.protocol = SocketAddress_Protocol::TCP;
        self.address.clear();
        self.port_specifier = ::std::option::Option::None;
        self.port_specifier = ::std::option::Option::None;
        self.resolver_name.clear();
        self.ipv4_compat = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SocketAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SocketAddress {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SocketAddress_Protocol {
    TCP = 0,
    UDP = 1,
}

impl ::protobuf::ProtobufEnum for SocketAddress_Protocol {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SocketAddress_Protocol> {
        match value {
            0 => ::std::option::Option::Some(SocketAddress_Protocol::TCP),
            1 => ::std::option::Option::Some(SocketAddress_Protocol::UDP),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SocketAddress_Protocol] = &[
            SocketAddress_Protocol::TCP,
            SocketAddress_Protocol::UDP,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SocketAddress_Protocol>("SocketAddress.Protocol", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SocketAddress_Protocol {
}

impl ::std::default::Default for SocketAddress_Protocol {
    fn default() -> Self {
        SocketAddress_Protocol::TCP
    }
}

impl ::protobuf::reflect::ProtobufValue for SocketAddress_Protocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TcpKeepalive {
    // message fields
    pub keepalive_probes: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub keepalive_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub keepalive_interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TcpKeepalive {
    fn default() -> &'a TcpKeepalive {
        <TcpKeepalive as ::protobuf::Message>::default_instance()
    }
}

impl TcpKeepalive {
    pub fn new() -> TcpKeepalive {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value keepalive_probes = 1;


    pub fn get_keepalive_probes(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.keepalive_probes.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_keepalive_probes(&mut self) {
        self.keepalive_probes.clear();
    }

    pub fn has_keepalive_probes(&self) -> bool {
        self.keepalive_probes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keepalive_probes(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.keepalive_probes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_keepalive_probes(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.keepalive_probes.is_none() {
            self.keepalive_probes.set_default();
        }
        self.keepalive_probes.as_mut().unwrap()
    }

    // Take field
    pub fn take_keepalive_probes(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.keepalive_probes.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value keepalive_time = 2;


    pub fn get_keepalive_time(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.keepalive_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_keepalive_time(&mut self) {
        self.keepalive_time.clear();
    }

    pub fn has_keepalive_time(&self) -> bool {
        self.keepalive_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keepalive_time(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.keepalive_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_keepalive_time(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.keepalive_time.is_none() {
            self.keepalive_time.set_default();
        }
        self.keepalive_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_keepalive_time(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.keepalive_time.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value keepalive_interval = 3;


    pub fn get_keepalive_interval(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.keepalive_interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_keepalive_interval(&mut self) {
        self.keepalive_interval.clear();
    }

    pub fn has_keepalive_interval(&self) -> bool {
        self.keepalive_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keepalive_interval(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.keepalive_interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_keepalive_interval(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.keepalive_interval.is_none() {
            self.keepalive_interval.set_default();
        }
        self.keepalive_interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_keepalive_interval(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.keepalive_interval.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for TcpKeepalive {
    fn is_initialized(&self) -> bool {
        for v in &self.keepalive_probes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.keepalive_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.keepalive_interval {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.keepalive_probes)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.keepalive_time)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.keepalive_interval)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.keepalive_probes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.keepalive_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.keepalive_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.keepalive_probes.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.keepalive_time.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.keepalive_interval.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TcpKeepalive {
        TcpKeepalive::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "keepalive_probes",
                |m: &TcpKeepalive| { &m.keepalive_probes },
                |m: &mut TcpKeepalive| { &mut m.keepalive_probes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "keepalive_time",
                |m: &TcpKeepalive| { &m.keepalive_time },
                |m: &mut TcpKeepalive| { &mut m.keepalive_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "keepalive_interval",
                |m: &TcpKeepalive| { &m.keepalive_interval },
                |m: &mut TcpKeepalive| { &mut m.keepalive_interval },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TcpKeepalive>(
                "TcpKeepalive",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TcpKeepalive {
        static instance: ::protobuf::rt::LazyV2<TcpKeepalive> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TcpKeepalive::new)
    }
}

impl ::protobuf::Clear for TcpKeepalive {
    fn clear(&mut self) {
        self.keepalive_probes.clear();
        self.keepalive_time.clear();
        self.keepalive_interval.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TcpKeepalive {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpKeepalive {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BindConfig {
    // message fields
    pub source_address: ::protobuf::SingularPtrField<SocketAddress>,
    pub freebind: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub socket_options: ::protobuf::RepeatedField<super::socket_option::SocketOption>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BindConfig {
    fn default() -> &'a BindConfig {
        <BindConfig as ::protobuf::Message>::default_instance()
    }
}

impl BindConfig {
    pub fn new() -> BindConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.SocketAddress source_address = 1;


    pub fn get_source_address(&self) -> &SocketAddress {
        self.source_address.as_ref().unwrap_or_else(|| <SocketAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_source_address(&mut self) {
        self.source_address.clear();
    }

    pub fn has_source_address(&self) -> bool {
        self.source_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_address(&mut self, v: SocketAddress) {
        self.source_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_address(&mut self) -> &mut SocketAddress {
        if self.source_address.is_none() {
            self.source_address.set_default();
        }
        self.source_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_address(&mut self) -> SocketAddress {
        self.source_address.take().unwrap_or_else(|| SocketAddress::new())
    }

    // .google.protobuf.BoolValue freebind = 2;


    pub fn get_freebind(&self) -> &::protobuf::well_known_types::BoolValue {
        self.freebind.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_freebind(&mut self) {
        self.freebind.clear();
    }

    pub fn has_freebind(&self) -> bool {
        self.freebind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_freebind(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.freebind = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_freebind(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.freebind.is_none() {
            self.freebind.set_default();
        }
        self.freebind.as_mut().unwrap()
    }

    // Take field
    pub fn take_freebind(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.freebind.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // repeated .envoy.config.core.v3.SocketOption socket_options = 3;


    pub fn get_socket_options(&self) -> &[super::socket_option::SocketOption] {
        &self.socket_options
    }
    pub fn clear_socket_options(&mut self) {
        self.socket_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_socket_options(&mut self, v: ::protobuf::RepeatedField<super::socket_option::SocketOption>) {
        self.socket_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_socket_options(&mut self) -> &mut ::protobuf::RepeatedField<super::socket_option::SocketOption> {
        &mut self.socket_options
    }

    // Take field
    pub fn take_socket_options(&mut self) -> ::protobuf::RepeatedField<super::socket_option::SocketOption> {
        ::std::mem::replace(&mut self.socket_options, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for BindConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.source_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.freebind {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.socket_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.freebind)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.socket_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.source_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.freebind.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.socket_options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.source_address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.freebind.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.socket_options {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BindConfig {
        BindConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SocketAddress>>(
                "source_address",
                |m: &BindConfig| { &m.source_address },
                |m: &mut BindConfig| { &mut m.source_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "freebind",
                |m: &BindConfig| { &m.freebind },
                |m: &mut BindConfig| { &mut m.freebind },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::socket_option::SocketOption>>(
                "socket_options",
                |m: &BindConfig| { &m.socket_options },
                |m: &mut BindConfig| { &mut m.socket_options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BindConfig>(
                "BindConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BindConfig {
        static instance: ::protobuf::rt::LazyV2<BindConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BindConfig::new)
    }
}

impl ::protobuf::Clear for BindConfig {
    fn clear(&mut self) {
        self.source_address.clear();
        self.freebind.clear();
        self.socket_options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BindConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BindConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Address {
    // message oneof groups
    pub address: ::std::option::Option<Address_oneof_address>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Address {
    fn default() -> &'a Address {
        <Address as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Address_oneof_address {
    socket_address(SocketAddress),
    pipe(Pipe),
    envoy_internal_address(EnvoyInternalAddress),
}

impl Address {
    pub fn new() -> Address {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.SocketAddress socket_address = 1;


    pub fn get_socket_address(&self) -> &SocketAddress {
        match self.address {
            ::std::option::Option::Some(Address_oneof_address::socket_address(ref v)) => v,
            _ => <SocketAddress as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_socket_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_socket_address(&self) -> bool {
        match self.address {
            ::std::option::Option::Some(Address_oneof_address::socket_address(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_socket_address(&mut self, v: SocketAddress) {
        self.address = ::std::option::Option::Some(Address_oneof_address::socket_address(v))
    }

    // Mutable pointer to the field.
    pub fn mut_socket_address(&mut self) -> &mut SocketAddress {
        if let ::std::option::Option::Some(Address_oneof_address::socket_address(_)) = self.address {
        } else {
            self.address = ::std::option::Option::Some(Address_oneof_address::socket_address(SocketAddress::new()));
        }
        match self.address {
            ::std::option::Option::Some(Address_oneof_address::socket_address(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_socket_address(&mut self) -> SocketAddress {
        if self.has_socket_address() {
            match self.address.take() {
                ::std::option::Option::Some(Address_oneof_address::socket_address(v)) => v,
                _ => panic!(),
            }
        } else {
            SocketAddress::new()
        }
    }

    // .envoy.config.core.v3.Pipe pipe = 2;


    pub fn get_pipe(&self) -> &Pipe {
        match self.address {
            ::std::option::Option::Some(Address_oneof_address::pipe(ref v)) => v,
            _ => <Pipe as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_pipe(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_pipe(&self) -> bool {
        match self.address {
            ::std::option::Option::Some(Address_oneof_address::pipe(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_pipe(&mut self, v: Pipe) {
        self.address = ::std::option::Option::Some(Address_oneof_address::pipe(v))
    }

    // Mutable pointer to the field.
    pub fn mut_pipe(&mut self) -> &mut Pipe {
        if let ::std::option::Option::Some(Address_oneof_address::pipe(_)) = self.address {
        } else {
            self.address = ::std::option::Option::Some(Address_oneof_address::pipe(Pipe::new()));
        }
        match self.address {
            ::std::option::Option::Some(Address_oneof_address::pipe(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_pipe(&mut self) -> Pipe {
        if self.has_pipe() {
            match self.address.take() {
                ::std::option::Option::Some(Address_oneof_address::pipe(v)) => v,
                _ => panic!(),
            }
        } else {
            Pipe::new()
        }
    }

    // .envoy.config.core.v3.EnvoyInternalAddress envoy_internal_address = 3;


    pub fn get_envoy_internal_address(&self) -> &EnvoyInternalAddress {
        match self.address {
            ::std::option::Option::Some(Address_oneof_address::envoy_internal_address(ref v)) => v,
            _ => <EnvoyInternalAddress as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_envoy_internal_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_envoy_internal_address(&self) -> bool {
        match self.address {
            ::std::option::Option::Some(Address_oneof_address::envoy_internal_address(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_envoy_internal_address(&mut self, v: EnvoyInternalAddress) {
        self.address = ::std::option::Option::Some(Address_oneof_address::envoy_internal_address(v))
    }

    // Mutable pointer to the field.
    pub fn mut_envoy_internal_address(&mut self) -> &mut EnvoyInternalAddress {
        if let ::std::option::Option::Some(Address_oneof_address::envoy_internal_address(_)) = self.address {
        } else {
            self.address = ::std::option::Option::Some(Address_oneof_address::envoy_internal_address(EnvoyInternalAddress::new()));
        }
        match self.address {
            ::std::option::Option::Some(Address_oneof_address::envoy_internal_address(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_envoy_internal_address(&mut self) -> EnvoyInternalAddress {
        if self.has_envoy_internal_address() {
            match self.address.take() {
                ::std::option::Option::Some(Address_oneof_address::envoy_internal_address(v)) => v,
                _ => panic!(),
            }
        } else {
            EnvoyInternalAddress::new()
        }
    }
}

impl ::protobuf::Message for Address {
    fn is_initialized(&self) -> bool {
        if let Some(Address_oneof_address::socket_address(ref v)) = self.address {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Address_oneof_address::pipe(ref v)) = self.address {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Address_oneof_address::envoy_internal_address(ref v)) = self.address {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.address = ::std::option::Option::Some(Address_oneof_address::socket_address(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.address = ::std::option::Option::Some(Address_oneof_address::pipe(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.address = ::std::option::Option::Some(Address_oneof_address::envoy_internal_address(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.address {
            match v {
                &Address_oneof_address::socket_address(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Address_oneof_address::pipe(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Address_oneof_address::envoy_internal_address(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.address {
            match v {
                &Address_oneof_address::socket_address(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Address_oneof_address::pipe(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Address_oneof_address::envoy_internal_address(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Address {
        Address::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SocketAddress>(
                "socket_address",
                Address::has_socket_address,
                Address::get_socket_address,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Pipe>(
                "pipe",
                Address::has_pipe,
                Address::get_pipe,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, EnvoyInternalAddress>(
                "envoy_internal_address",
                Address::has_envoy_internal_address,
                Address::get_envoy_internal_address,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Address>(
                "Address",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Address {
        static instance: ::protobuf::rt::LazyV2<Address> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Address::new)
    }
}

impl ::protobuf::Clear for Address {
    fn clear(&mut self) {
        self.address = ::std::option::Option::None;
        self.address = ::std::option::Option::None;
        self.address = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Address {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Address {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CidrRange {
    // message fields
    pub address_prefix: ::std::string::String,
    pub prefix_len: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CidrRange {
    fn default() -> &'a CidrRange {
        <CidrRange as ::protobuf::Message>::default_instance()
    }
}

impl CidrRange {
    pub fn new() -> CidrRange {
        ::std::default::Default::default()
    }

    // string address_prefix = 1;


    pub fn get_address_prefix(&self) -> &str {
        &self.address_prefix
    }
    pub fn clear_address_prefix(&mut self) {
        self.address_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_prefix(&mut self, v: ::std::string::String) {
        self.address_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.address_prefix
    }

    // Take field
    pub fn take_address_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address_prefix, ::std::string::String::new())
    }

    // .google.protobuf.UInt32Value prefix_len = 2;


    pub fn get_prefix_len(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.prefix_len.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_prefix_len(&mut self) {
        self.prefix_len.clear();
    }

    pub fn has_prefix_len(&self) -> bool {
        self.prefix_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix_len(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.prefix_len = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix_len(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.prefix_len.is_none() {
            self.prefix_len.set_default();
        }
        self.prefix_len.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix_len(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.prefix_len.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for CidrRange {
    fn is_initialized(&self) -> bool {
        for v in &self.prefix_len {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address_prefix)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.prefix_len)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address_prefix);
        }
        if let Some(ref v) = self.prefix_len.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address_prefix.is_empty() {
            os.write_string(1, &self.address_prefix)?;
        }
        if let Some(ref v) = self.prefix_len.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CidrRange {
        CidrRange::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address_prefix",
                |m: &CidrRange| { &m.address_prefix },
                |m: &mut CidrRange| { &mut m.address_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "prefix_len",
                |m: &CidrRange| { &m.prefix_len },
                |m: &mut CidrRange| { &mut m.prefix_len },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CidrRange>(
                "CidrRange",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CidrRange {
        static instance: ::protobuf::rt::LazyV2<CidrRange> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CidrRange::new)
    }
}

impl ::protobuf::Clear for CidrRange {
    fn clear(&mut self) {
        self.address_prefix.clear();
        self.prefix_len.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CidrRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CidrRange {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"envoy/config/core/v3/address.proto\x12\x14envoy.config.core.v3\x1a(e\
    nvoy/config/core/v3/socket_option.proto\x1a\x1egoogle/protobuf/wrappers.\
    proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioni\
    ng.proto\x1a\x17validate/validate.proto\"`\n\x04Pipe\x12\x1b\n\x04path\
    \x18\x01\x20\x01(\tR\x04pathB\x07\xfaB\x04r\x02\x10\x01\x12\x1c\n\x04mod\
    e\x18\x02\x20\x01(\rR\x04modeB\x08\xfaB\x05*\x03\x18\xff\x03:\x1d\x9a\
    \xc5\x88\x1e\x18\n\x16envoy.api.v2.core.Pipe\"i\n\x14EnvoyInternalAddres\
    s\x122\n\x14server_listener_name\x18\x01\x20\x01(\tH\0R\x12serverListene\
    rNameB\x1d\n\x16address_name_specifier\x12\x03\xf8B\x01\"\xf6\x02\n\rSoc\
    ketAddress\x12R\n\x08protocol\x18\x01\x20\x01(\x0e2,.envoy.config.core.v\
    3.SocketAddress.ProtocolR\x08protocolB\x08\xfaB\x05\x82\x01\x02\x10\x01\
    \x12!\n\x07address\x18\x02\x20\x01(\tR\x07addressB\x07\xfaB\x04r\x02\x10\
    \x01\x12*\n\nport_value\x18\x03\x20\x01(\rH\0R\tportValueB\t\xfaB\x06*\
    \x04\x18\xff\xff\x03\x12\x1f\n\nnamed_port\x18\x04\x20\x01(\tH\0R\tnamed\
    Port\x12#\n\rresolver_name\x18\x05\x20\x01(\tR\x0cresolverName\x12\x1f\n\
    \x0bipv4_compat\x18\x06\x20\x01(\x08R\nipv4Compat\"\x1c\n\x08Protocol\
    \x12\x07\n\x03TCP\x10\0\x12\x07\n\x03UDP\x10\x01B\x15\n\x0eport_specifie\
    r\x12\x03\xf8B\x01:&\x9a\xc5\x88\x1e!\n\x1fenvoy.api.v2.core.SocketAddre\
    ss\"\x90\x02\n\x0cTcpKeepalive\x12G\n\x10keepalive_probes\x18\x01\x20\
    \x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x0fkeepaliveProbes\x12C\n\
    \x0ekeepalive_time\x18\x02\x20\x01(\x0b2\x1c.google.protobuf.UInt32Value\
    R\rkeepaliveTime\x12K\n\x12keepalive_interval\x18\x03\x20\x01(\x0b2\x1c.\
    google.protobuf.UInt32ValueR\x11keepaliveInterval:%\x9a\xc5\x88\x1e\x20\
    \n\x1eenvoy.api.v2.core.TcpKeepalive\"\x8a\x02\n\nBindConfig\x12T\n\x0es\
    ource_address\x18\x01\x20\x01(\x0b2#.envoy.config.core.v3.SocketAddressR\
    \rsourceAddressB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x126\n\x08freebind\x18\
    \x02\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x08freebind\x12I\n\x0e\
    socket_options\x18\x03\x20\x03(\x0b2\".envoy.config.core.v3.SocketOption\
    R\rsocketOptions:#\x9a\xc5\x88\x1e\x1e\n\x1cenvoy.api.v2.core.BindConfig\
    \"\x9f\x02\n\x07Address\x12L\n\x0esocket_address\x18\x01\x20\x01(\x0b2#.\
    envoy.config.core.v3.SocketAddressH\0R\rsocketAddress\x120\n\x04pipe\x18\
    \x02\x20\x01(\x0b2\x1a.envoy.config.core.v3.PipeH\0R\x04pipe\x12b\n\x16e\
    nvoy_internal_address\x18\x03\x20\x01(\x0b2*.envoy.config.core.v3.EnvoyI\
    nternalAddressH\0R\x14envoyInternalAddressB\x0e\n\x07address\x12\x03\xf8\
    B\x01:\x20\x9a\xc5\x88\x1e\x1b\n\x19envoy.api.v2.core.Address\"\xa6\x01\
    \n\tCidrRange\x12.\n\x0eaddress_prefix\x18\x01\x20\x01(\tR\raddressPrefi\
    xB\x07\xfaB\x04r\x02\x10\x01\x12E\n\nprefix_len\x18\x02\x20\x01(\x0b2\
    \x1c.google.protobuf.UInt32ValueR\tprefixLenB\x08\xfaB\x05*\x03\x18\x80\
    \x01:\"\x9a\xc5\x88\x1e\x1d\n\x1benvoy.api.v2.core.CidrRangeB<\n\"io.env\
    oyproxy.envoy.config.core.v3B\x0cAddressProtoP\x01\xba\x80\xc8\xd1\x06\
    \x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
