// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/common/ratelimit/v3/ratelimit.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RateLimitDescriptor {
    // message fields
    pub entries: ::protobuf::RepeatedField<RateLimitDescriptor_Entry>,
    pub limit: ::protobuf::SingularPtrField<RateLimitDescriptor_RateLimitOverride>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RateLimitDescriptor {
    fn default() -> &'a RateLimitDescriptor {
        <RateLimitDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl RateLimitDescriptor {
    pub fn new() -> RateLimitDescriptor {
        ::std::default::Default::default()
    }

    // repeated .envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries = 1;


    pub fn get_entries(&self) -> &[RateLimitDescriptor_Entry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<RateLimitDescriptor_Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<RateLimitDescriptor_Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<RateLimitDescriptor_Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // .envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimitOverride limit = 2;


    pub fn get_limit(&self) -> &RateLimitDescriptor_RateLimitOverride {
        self.limit.as_ref().unwrap_or_else(|| <RateLimitDescriptor_RateLimitOverride as ::protobuf::Message>::default_instance())
    }
    pub fn clear_limit(&mut self) {
        self.limit.clear();
    }

    pub fn has_limit(&self) -> bool {
        self.limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: RateLimitDescriptor_RateLimitOverride) {
        self.limit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_limit(&mut self) -> &mut RateLimitDescriptor_RateLimitOverride {
        if self.limit.is_none() {
            self.limit.set_default();
        }
        self.limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_limit(&mut self) -> RateLimitDescriptor_RateLimitOverride {
        self.limit.take().unwrap_or_else(|| RateLimitDescriptor_RateLimitOverride::new())
    }
}

impl ::protobuf::Message for RateLimitDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.limit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.limit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.limit.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RateLimitDescriptor {
        RateLimitDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RateLimitDescriptor_Entry>>(
                "entries",
                |m: &RateLimitDescriptor| { &m.entries },
                |m: &mut RateLimitDescriptor| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RateLimitDescriptor_RateLimitOverride>>(
                "limit",
                |m: &RateLimitDescriptor| { &m.limit },
                |m: &mut RateLimitDescriptor| { &mut m.limit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RateLimitDescriptor>(
                "RateLimitDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RateLimitDescriptor {
        static instance: ::protobuf::rt::LazyV2<RateLimitDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RateLimitDescriptor::new)
    }
}

impl ::protobuf::Clear for RateLimitDescriptor {
    fn clear(&mut self) {
        self.entries.clear();
        self.limit.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RateLimitDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RateLimitDescriptor_Entry {
    // message fields
    pub key: ::std::string::String,
    pub value: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RateLimitDescriptor_Entry {
    fn default() -> &'a RateLimitDescriptor_Entry {
        <RateLimitDescriptor_Entry as ::protobuf::Message>::default_instance()
    }
}

impl RateLimitDescriptor_Entry {
    pub fn new() -> RateLimitDescriptor_Entry {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 2;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RateLimitDescriptor_Entry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.key);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_string(1, &self.key)?;
        }
        if !self.value.is_empty() {
            os.write_string(2, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RateLimitDescriptor_Entry {
        RateLimitDescriptor_Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &RateLimitDescriptor_Entry| { &m.key },
                |m: &mut RateLimitDescriptor_Entry| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &RateLimitDescriptor_Entry| { &m.value },
                |m: &mut RateLimitDescriptor_Entry| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RateLimitDescriptor_Entry>(
                "RateLimitDescriptor.Entry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RateLimitDescriptor_Entry {
        static instance: ::protobuf::rt::LazyV2<RateLimitDescriptor_Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RateLimitDescriptor_Entry::new)
    }
}

impl ::protobuf::Clear for RateLimitDescriptor_Entry {
    fn clear(&mut self) {
        self.key.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RateLimitDescriptor_Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitDescriptor_Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RateLimitDescriptor_RateLimitOverride {
    // message fields
    pub requests_per_unit: u32,
    pub unit: super::ratelimit_unit::RateLimitUnit,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RateLimitDescriptor_RateLimitOverride {
    fn default() -> &'a RateLimitDescriptor_RateLimitOverride {
        <RateLimitDescriptor_RateLimitOverride as ::protobuf::Message>::default_instance()
    }
}

impl RateLimitDescriptor_RateLimitOverride {
    pub fn new() -> RateLimitDescriptor_RateLimitOverride {
        ::std::default::Default::default()
    }

    // uint32 requests_per_unit = 1;


    pub fn get_requests_per_unit(&self) -> u32 {
        self.requests_per_unit
    }
    pub fn clear_requests_per_unit(&mut self) {
        self.requests_per_unit = 0;
    }

    // Param is passed by value, moved
    pub fn set_requests_per_unit(&mut self, v: u32) {
        self.requests_per_unit = v;
    }

    // .envoy.type.v3.RateLimitUnit unit = 2;


    pub fn get_unit(&self) -> super::ratelimit_unit::RateLimitUnit {
        self.unit
    }
    pub fn clear_unit(&mut self) {
        self.unit = super::ratelimit_unit::RateLimitUnit::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: super::ratelimit_unit::RateLimitUnit) {
        self.unit = v;
    }
}

impl ::protobuf::Message for RateLimitDescriptor_RateLimitOverride {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.requests_per_unit = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.unit, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.requests_per_unit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.requests_per_unit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.unit != super::ratelimit_unit::RateLimitUnit::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.requests_per_unit != 0 {
            os.write_uint32(1, self.requests_per_unit)?;
        }
        if self.unit != super::ratelimit_unit::RateLimitUnit::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.unit))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RateLimitDescriptor_RateLimitOverride {
        RateLimitDescriptor_RateLimitOverride::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "requests_per_unit",
                |m: &RateLimitDescriptor_RateLimitOverride| { &m.requests_per_unit },
                |m: &mut RateLimitDescriptor_RateLimitOverride| { &mut m.requests_per_unit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::ratelimit_unit::RateLimitUnit>>(
                "unit",
                |m: &RateLimitDescriptor_RateLimitOverride| { &m.unit },
                |m: &mut RateLimitDescriptor_RateLimitOverride| { &mut m.unit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RateLimitDescriptor_RateLimitOverride>(
                "RateLimitDescriptor.RateLimitOverride",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RateLimitDescriptor_RateLimitOverride {
        static instance: ::protobuf::rt::LazyV2<RateLimitDescriptor_RateLimitOverride> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RateLimitDescriptor_RateLimitOverride::new)
    }
}

impl ::protobuf::Clear for RateLimitDescriptor_RateLimitOverride {
    fn clear(&mut self) {
        self.requests_per_unit = 0;
        self.unit = super::ratelimit_unit::RateLimitUnit::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RateLimitDescriptor_RateLimitOverride {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitDescriptor_RateLimitOverride {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct LocalRateLimitDescriptor {
    // message fields
    pub entries: ::protobuf::RepeatedField<RateLimitDescriptor_Entry>,
    pub token_bucket: ::protobuf::SingularPtrField<super::token_bucket::TokenBucket>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalRateLimitDescriptor {
    fn default() -> &'a LocalRateLimitDescriptor {
        <LocalRateLimitDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl LocalRateLimitDescriptor {
    pub fn new() -> LocalRateLimitDescriptor {
        ::std::default::Default::default()
    }

    // repeated .envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.Entry entries = 1;


    pub fn get_entries(&self) -> &[RateLimitDescriptor_Entry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<RateLimitDescriptor_Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<RateLimitDescriptor_Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<RateLimitDescriptor_Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    // .envoy.type.v3.TokenBucket token_bucket = 2;


    pub fn get_token_bucket(&self) -> &super::token_bucket::TokenBucket {
        self.token_bucket.as_ref().unwrap_or_else(|| <super::token_bucket::TokenBucket as ::protobuf::Message>::default_instance())
    }
    pub fn clear_token_bucket(&mut self) {
        self.token_bucket.clear();
    }

    pub fn has_token_bucket(&self) -> bool {
        self.token_bucket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_bucket(&mut self, v: super::token_bucket::TokenBucket) {
        self.token_bucket = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_bucket(&mut self) -> &mut super::token_bucket::TokenBucket {
        if self.token_bucket.is_none() {
            self.token_bucket.set_default();
        }
        self.token_bucket.as_mut().unwrap()
    }

    // Take field
    pub fn take_token_bucket(&mut self) -> super::token_bucket::TokenBucket {
        self.token_bucket.take().unwrap_or_else(|| super::token_bucket::TokenBucket::new())
    }
}

impl ::protobuf::Message for LocalRateLimitDescriptor {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.token_bucket {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.token_bucket)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.token_bucket.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.token_bucket.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalRateLimitDescriptor {
        LocalRateLimitDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RateLimitDescriptor_Entry>>(
                "entries",
                |m: &LocalRateLimitDescriptor| { &m.entries },
                |m: &mut LocalRateLimitDescriptor| { &mut m.entries },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::token_bucket::TokenBucket>>(
                "token_bucket",
                |m: &LocalRateLimitDescriptor| { &m.token_bucket },
                |m: &mut LocalRateLimitDescriptor| { &mut m.token_bucket },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LocalRateLimitDescriptor>(
                "LocalRateLimitDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LocalRateLimitDescriptor {
        static instance: ::protobuf::rt::LazyV2<LocalRateLimitDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LocalRateLimitDescriptor::new)
    }
}

impl ::protobuf::Clear for LocalRateLimitDescriptor {
    fn clear(&mut self) {
        self.entries.clear();
        self.token_bucket.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalRateLimitDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalRateLimitDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n4envoy/extensions/common/ratelimit/v3/ratelimit.proto\x12$envoy.extens\
    ions.common.ratelimit.v3\x1a\"envoy/type/v3/ratelimit_unit.proto\x1a\x20\
    envoy/type/v3/token_bucket.proto\x1a\x1dudpa/annotations/status.proto\
    \x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\
    \x89\x04\n\x13RateLimitDescriptor\x12c\n\x07entries\x18\x01\x20\x03(\x0b\
    2?.envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.EntryR\x07en\
    triesB\x08\xfaB\x05\x92\x01\x02\x08\x01\x12a\n\x05limit\x18\x02\x20\x01(\
    \x0b2K.envoy.extensions.common.ratelimit.v3.RateLimitDescriptor.RateLimi\
    tOverrideR\x05limit\x1az\n\x05Entry\x12\x19\n\x03key\x18\x01\x20\x01(\tR\
    \x03keyB\x07\xfaB\x04r\x02\x10\x01\x12\x1d\n\x05value\x18\x02\x20\x01(\t\
    R\x05valueB\x07\xfaB\x04r\x02\x10\x01:7\x9a\xc5\x88\x1e2\n0envoy.api.v2.\
    ratelimit.RateLimitDescriptor.Entry\x1a{\n\x11RateLimitOverride\x12*\n\
    \x11requests_per_unit\x18\x01\x20\x01(\rR\x0frequestsPerUnit\x12:\n\x04u\
    nit\x18\x02\x20\x01(\x0e2\x1c.envoy.type.v3.RateLimitUnitR\x04unitB\x08\
    \xfaB\x05\x82\x01\x02\x10\x01:1\x9a\xc5\x88\x1e,\n*envoy.api.v2.ratelimi\
    t.RateLimitDescriptor\"\xc8\x01\n\x18LocalRateLimitDescriptor\x12c\n\x07\
    entries\x18\x01\x20\x03(\x0b2?.envoy.extensions.common.ratelimit.v3.Rate\
    LimitDescriptor.EntryR\x07entriesB\x08\xfaB\x05\x92\x01\x02\x08\x01\x12G\
    \n\x0ctoken_bucket\x18\x02\x20\x01(\x0b2\x1a.envoy.type.v3.TokenBucketR\
    \x0btokenBucketB\x08\xfaB\x05\x8a\x01\x02\x10\x01BN\n2io.envoyproxy.envo\
    y.extensions.common.ratelimit.v3B\x0eRatelimitProtoP\x01\xba\x80\xc8\xd1\
    \x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
