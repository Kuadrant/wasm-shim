// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/type/matcher/v3/value.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ValueMatcher {
    // message oneof groups
    pub match_pattern: ::std::option::Option<ValueMatcher_oneof_match_pattern>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValueMatcher {
    fn default() -> &'a ValueMatcher {
        <ValueMatcher as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ValueMatcher_oneof_match_pattern {
    null_match(ValueMatcher_NullMatch),
    double_match(super::number::DoubleMatcher),
    string_match(super::string::StringMatcher),
    bool_match(bool),
    present_match(bool),
    list_match(::std::boxed::Box<ListMatcher>),
}

impl ValueMatcher {
    pub fn new() -> ValueMatcher {
        ::std::default::Default::default()
    }

    // .envoy.type.matcher.v3.ValueMatcher.NullMatch null_match = 1;


    pub fn get_null_match(&self) -> &ValueMatcher_NullMatch {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::null_match(ref v)) => v,
            _ => <ValueMatcher_NullMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_null_match(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_null_match(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::null_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_null_match(&mut self, v: ValueMatcher_NullMatch) {
        self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::null_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_null_match(&mut self) -> &mut ValueMatcher_NullMatch {
        if let ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::null_match(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::null_match(ValueMatcher_NullMatch::new()));
        }
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::null_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_null_match(&mut self) -> ValueMatcher_NullMatch {
        if self.has_null_match() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::null_match(v)) => v,
                _ => panic!(),
            }
        } else {
            ValueMatcher_NullMatch::new()
        }
    }

    // .envoy.type.matcher.v3.DoubleMatcher double_match = 2;


    pub fn get_double_match(&self) -> &super::number::DoubleMatcher {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::double_match(ref v)) => v,
            _ => <super::number::DoubleMatcher as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_double_match(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_double_match(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::double_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_match(&mut self, v: super::number::DoubleMatcher) {
        self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::double_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_double_match(&mut self) -> &mut super::number::DoubleMatcher {
        if let ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::double_match(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::double_match(super::number::DoubleMatcher::new()));
        }
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::double_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_double_match(&mut self) -> super::number::DoubleMatcher {
        if self.has_double_match() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::double_match(v)) => v,
                _ => panic!(),
            }
        } else {
            super::number::DoubleMatcher::new()
        }
    }

    // .envoy.type.matcher.v3.StringMatcher string_match = 3;


    pub fn get_string_match(&self) -> &super::string::StringMatcher {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::string_match(ref v)) => v,
            _ => <super::string::StringMatcher as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_string_match(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_string_match(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::string_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_match(&mut self, v: super::string::StringMatcher) {
        self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::string_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_match(&mut self) -> &mut super::string::StringMatcher {
        if let ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::string_match(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::string_match(super::string::StringMatcher::new()));
        }
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::string_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_match(&mut self) -> super::string::StringMatcher {
        if self.has_string_match() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::string_match(v)) => v,
                _ => panic!(),
            }
        } else {
            super::string::StringMatcher::new()
        }
    }

    // bool bool_match = 4;


    pub fn get_bool_match(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::bool_match(v)) => v,
            _ => false,
        }
    }
    pub fn clear_bool_match(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_bool_match(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::bool_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_match(&mut self, v: bool) {
        self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::bool_match(v))
    }

    // bool present_match = 5;


    pub fn get_present_match(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::present_match(v)) => v,
            _ => false,
        }
    }
    pub fn clear_present_match(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_present_match(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::present_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_present_match(&mut self, v: bool) {
        self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::present_match(v))
    }

    // .envoy.type.matcher.v3.ListMatcher list_match = 6;


    pub fn get_list_match(&self) -> &ListMatcher {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::list_match(ref v)) => v,
            _ => <ListMatcher as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_list_match(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_list_match(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::list_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list_match(&mut self, v: ListMatcher) {
        self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::list_match(::std::boxed::Box::new(v)))
    }

    // Mutable pointer to the field.
    pub fn mut_list_match(&mut self) -> &mut ListMatcher {
        if let ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::list_match(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::list_match(::std::boxed::Box::new(ListMatcher::new())));
        }
        match self.match_pattern {
            ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::list_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list_match(&mut self) -> ListMatcher {
        if self.has_list_match() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::list_match(v)) => *v,
                _ => panic!(),
            }
        } else {
            ListMatcher::new()
        }
    }
}

impl ::protobuf::Message for ValueMatcher {
    fn is_initialized(&self) -> bool {
        if let Some(ValueMatcher_oneof_match_pattern::null_match(ref v)) = self.match_pattern {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ValueMatcher_oneof_match_pattern::double_match(ref v)) = self.match_pattern {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ValueMatcher_oneof_match_pattern::string_match(ref v)) = self.match_pattern {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ValueMatcher_oneof_match_pattern::list_match(ref v)) = self.match_pattern {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::null_match(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::double_match(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::string_match(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::bool_match(is.read_bool()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::present_match(is.read_bool()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(ValueMatcher_oneof_match_pattern::list_match(::std::boxed::Box::new(is.read_message()?)));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.match_pattern {
            match v {
                &ValueMatcher_oneof_match_pattern::null_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ValueMatcher_oneof_match_pattern::double_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ValueMatcher_oneof_match_pattern::string_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ValueMatcher_oneof_match_pattern::bool_match(v) => {
                    my_size += 2;
                },
                &ValueMatcher_oneof_match_pattern::present_match(v) => {
                    my_size += 2;
                },
                &ValueMatcher_oneof_match_pattern::list_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.match_pattern {
            match v {
                &ValueMatcher_oneof_match_pattern::null_match(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ValueMatcher_oneof_match_pattern::double_match(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ValueMatcher_oneof_match_pattern::string_match(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ValueMatcher_oneof_match_pattern::bool_match(v) => {
                    os.write_bool(4, v)?;
                },
                &ValueMatcher_oneof_match_pattern::present_match(v) => {
                    os.write_bool(5, v)?;
                },
                &ValueMatcher_oneof_match_pattern::list_match(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValueMatcher {
        ValueMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ValueMatcher_NullMatch>(
                "null_match",
                ValueMatcher::has_null_match,
                ValueMatcher::get_null_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::number::DoubleMatcher>(
                "double_match",
                ValueMatcher::has_double_match,
                ValueMatcher::get_double_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::string::StringMatcher>(
                "string_match",
                ValueMatcher::has_string_match,
                ValueMatcher::get_string_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "bool_match",
                ValueMatcher::has_bool_match,
                ValueMatcher::get_bool_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "present_match",
                ValueMatcher::has_present_match,
                ValueMatcher::get_present_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ListMatcher>(
                "list_match",
                ValueMatcher::has_list_match,
                ValueMatcher::get_list_match,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValueMatcher>(
                "ValueMatcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValueMatcher {
        static instance: ::protobuf::rt::LazyV2<ValueMatcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValueMatcher::new)
    }
}

impl ::protobuf::Clear for ValueMatcher {
    fn clear(&mut self) {
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValueMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ValueMatcher_NullMatch {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValueMatcher_NullMatch {
    fn default() -> &'a ValueMatcher_NullMatch {
        <ValueMatcher_NullMatch as ::protobuf::Message>::default_instance()
    }
}

impl ValueMatcher_NullMatch {
    pub fn new() -> ValueMatcher_NullMatch {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ValueMatcher_NullMatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValueMatcher_NullMatch {
        ValueMatcher_NullMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValueMatcher_NullMatch>(
                "ValueMatcher.NullMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValueMatcher_NullMatch {
        static instance: ::protobuf::rt::LazyV2<ValueMatcher_NullMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValueMatcher_NullMatch::new)
    }
}

impl ::protobuf::Clear for ValueMatcher_NullMatch {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValueMatcher_NullMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValueMatcher_NullMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ListMatcher {
    // message oneof groups
    pub match_pattern: ::std::option::Option<ListMatcher_oneof_match_pattern>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListMatcher {
    fn default() -> &'a ListMatcher {
        <ListMatcher as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ListMatcher_oneof_match_pattern {
    one_of(::std::boxed::Box<ValueMatcher>),
}

impl ListMatcher {
    pub fn new() -> ListMatcher {
        ::std::default::Default::default()
    }

    // .envoy.type.matcher.v3.ValueMatcher one_of = 1;


    pub fn get_one_of(&self) -> &ValueMatcher {
        match self.match_pattern {
            ::std::option::Option::Some(ListMatcher_oneof_match_pattern::one_of(ref v)) => v,
            _ => <ValueMatcher as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_one_of(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_one_of(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(ListMatcher_oneof_match_pattern::one_of(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_one_of(&mut self, v: ValueMatcher) {
        self.match_pattern = ::std::option::Option::Some(ListMatcher_oneof_match_pattern::one_of(::std::boxed::Box::new(v)))
    }

    // Mutable pointer to the field.
    pub fn mut_one_of(&mut self) -> &mut ValueMatcher {
        if let ::std::option::Option::Some(ListMatcher_oneof_match_pattern::one_of(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(ListMatcher_oneof_match_pattern::one_of(::std::boxed::Box::new(ValueMatcher::new())));
        }
        match self.match_pattern {
            ::std::option::Option::Some(ListMatcher_oneof_match_pattern::one_of(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_one_of(&mut self) -> ValueMatcher {
        if self.has_one_of() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(ListMatcher_oneof_match_pattern::one_of(v)) => *v,
                _ => panic!(),
            }
        } else {
            ValueMatcher::new()
        }
    }
}

impl ::protobuf::Message for ListMatcher {
    fn is_initialized(&self) -> bool {
        if let Some(ListMatcher_oneof_match_pattern::one_of(ref v)) = self.match_pattern {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(ListMatcher_oneof_match_pattern::one_of(::std::boxed::Box::new(is.read_message()?)));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.match_pattern {
            match v {
                &ListMatcher_oneof_match_pattern::one_of(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.match_pattern {
            match v {
                &ListMatcher_oneof_match_pattern::one_of(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListMatcher {
        ListMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ValueMatcher>(
                "one_of",
                ListMatcher::has_one_of,
                ListMatcher::get_one_of,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListMatcher>(
                "ListMatcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListMatcher {
        static instance: ::protobuf::rt::LazyV2<ListMatcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListMatcher::new)
    }
}

impl ::protobuf::Clear for ListMatcher {
    fn clear(&mut self) {
        self.match_pattern = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!envoy/type/matcher/v3/value.proto\x12\x15envoy.type.matcher.v3\x1a\"e\
    nvoy/type/matcher/v3/number.proto\x1a\"envoy/type/matcher/v3/string.prot\
    o\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.p\
    roto\x1a\x17validate/validate.proto\"\xfe\x03\n\x0cValueMatcher\x12N\n\n\
    null_match\x18\x01\x20\x01(\x0b2-.envoy.type.matcher.v3.ValueMatcher.Nul\
    lMatchH\0R\tnullMatch\x12I\n\x0cdouble_match\x18\x02\x20\x01(\x0b2$.envo\
    y.type.matcher.v3.DoubleMatcherH\0R\x0bdoubleMatch\x12I\n\x0cstring_matc\
    h\x18\x03\x20\x01(\x0b2$.envoy.type.matcher.v3.StringMatcherH\0R\x0bstri\
    ngMatch\x12\x1f\n\nbool_match\x18\x04\x20\x01(\x08H\0R\tboolMatch\x12%\n\
    \rpresent_match\x18\x05\x20\x01(\x08H\0R\x0cpresentMatch\x12C\n\nlist_ma\
    tch\x18\x06\x20\x01(\x0b2\".envoy.type.matcher.v3.ListMatcherH\0R\tlistM\
    atch\x1a=\n\tNullMatch:0\x9a\xc5\x88\x1e+\n)envoy.type.matcher.ValueMatc\
    her.NullMatchB\x14\n\rmatch_pattern\x12\x03\xf8B\x01:&\x9a\xc5\x88\x1e!\
    \n\x1fenvoy.type.matcher.ValueMatcher\"\x88\x01\n\x0bListMatcher\x12<\n\
    \x06one_of\x18\x01\x20\x01(\x0b2#.envoy.type.matcher.v3.ValueMatcherH\0R\
    \x05oneOfB\x14\n\rmatch_pattern\x12\x03\xf8B\x01:%\x9a\xc5\x88\x1e\x20\n\
    \x1eenvoy.type.matcher.ListMatcherB;\n#io.envoyproxy.envoy.type.matcher.\
    v3B\nValueProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
