// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/service/auth/v3/attribute_context.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AttributeContext {
    // message fields
    pub source: ::protobuf::SingularPtrField<AttributeContext_Peer>,
    pub destination: ::protobuf::SingularPtrField<AttributeContext_Peer>,
    pub request: ::protobuf::SingularPtrField<AttributeContext_Request>,
    pub context_extensions: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub metadata_context: ::protobuf::SingularPtrField<super::base::Metadata>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AttributeContext {
    fn default() -> &'a AttributeContext {
        <AttributeContext as ::protobuf::Message>::default_instance()
    }
}

impl AttributeContext {
    pub fn new() -> AttributeContext {
        ::std::default::Default::default()
    }

    // .envoy.service.auth.v3.AttributeContext.Peer source = 1;


    pub fn get_source(&self) -> &AttributeContext_Peer {
        self.source.as_ref().unwrap_or_else(|| <AttributeContext_Peer as ::protobuf::Message>::default_instance())
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    pub fn has_source(&self) -> bool {
        self.source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: AttributeContext_Peer) {
        self.source = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut AttributeContext_Peer {
        if self.source.is_none() {
            self.source.set_default();
        }
        self.source.as_mut().unwrap()
    }

    // Take field
    pub fn take_source(&mut self) -> AttributeContext_Peer {
        self.source.take().unwrap_or_else(|| AttributeContext_Peer::new())
    }

    // .envoy.service.auth.v3.AttributeContext.Peer destination = 2;


    pub fn get_destination(&self) -> &AttributeContext_Peer {
        self.destination.as_ref().unwrap_or_else(|| <AttributeContext_Peer as ::protobuf::Message>::default_instance())
    }
    pub fn clear_destination(&mut self) {
        self.destination.clear();
    }

    pub fn has_destination(&self) -> bool {
        self.destination.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination(&mut self, v: AttributeContext_Peer) {
        self.destination = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination(&mut self) -> &mut AttributeContext_Peer {
        if self.destination.is_none() {
            self.destination.set_default();
        }
        self.destination.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination(&mut self) -> AttributeContext_Peer {
        self.destination.take().unwrap_or_else(|| AttributeContext_Peer::new())
    }

    // .envoy.service.auth.v3.AttributeContext.Request request = 4;


    pub fn get_request(&self) -> &AttributeContext_Request {
        self.request.as_ref().unwrap_or_else(|| <AttributeContext_Request as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request(&mut self) {
        self.request.clear();
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: AttributeContext_Request) {
        self.request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut AttributeContext_Request {
        if self.request.is_none() {
            self.request.set_default();
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> AttributeContext_Request {
        self.request.take().unwrap_or_else(|| AttributeContext_Request::new())
    }

    // repeated .envoy.service.auth.v3.AttributeContext.ContextExtensionsEntry context_extensions = 10;


    pub fn get_context_extensions(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.context_extensions
    }
    pub fn clear_context_extensions(&mut self) {
        self.context_extensions.clear();
    }

    // Param is passed by value, moved
    pub fn set_context_extensions(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.context_extensions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_context_extensions(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.context_extensions
    }

    // Take field
    pub fn take_context_extensions(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.context_extensions, ::std::collections::HashMap::new())
    }

    // .envoy.config.core.v3.Metadata metadata_context = 11;


    pub fn get_metadata_context(&self) -> &super::base::Metadata {
        self.metadata_context.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata_context(&mut self) {
        self.metadata_context.clear();
    }

    pub fn has_metadata_context(&self) -> bool {
        self.metadata_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata_context(&mut self, v: super::base::Metadata) {
        self.metadata_context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata_context(&mut self) -> &mut super::base::Metadata {
        if self.metadata_context.is_none() {
            self.metadata_context.set_default();
        }
        self.metadata_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata_context(&mut self) -> super::base::Metadata {
        self.metadata_context.take().unwrap_or_else(|| super::base::Metadata::new())
    }
}

impl ::protobuf::Message for AttributeContext {
    fn is_initialized(&self) -> bool {
        for v in &self.source {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.destination {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata_context {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.destination)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request)?;
                },
                10 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.context_extensions)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata_context)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.destination.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(10, &self.context_extensions);
        if let Some(ref v) = self.metadata_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.source.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.destination.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(10, &self.context_extensions, os)?;
        if let Some(ref v) = self.metadata_context.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AttributeContext {
        AttributeContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AttributeContext_Peer>>(
                "source",
                |m: &AttributeContext| { &m.source },
                |m: &mut AttributeContext| { &mut m.source },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AttributeContext_Peer>>(
                "destination",
                |m: &AttributeContext| { &m.destination },
                |m: &mut AttributeContext| { &mut m.destination },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AttributeContext_Request>>(
                "request",
                |m: &AttributeContext| { &m.request },
                |m: &mut AttributeContext| { &mut m.request },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "context_extensions",
                |m: &AttributeContext| { &m.context_extensions },
                |m: &mut AttributeContext| { &mut m.context_extensions },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata_context",
                |m: &AttributeContext| { &m.metadata_context },
                |m: &mut AttributeContext| { &mut m.metadata_context },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AttributeContext>(
                "AttributeContext",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AttributeContext {
        static instance: ::protobuf::rt::LazyV2<AttributeContext> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AttributeContext::new)
    }
}

impl ::protobuf::Clear for AttributeContext {
    fn clear(&mut self) {
        self.source.clear();
        self.destination.clear();
        self.request.clear();
        self.context_extensions.clear();
        self.metadata_context.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AttributeContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttributeContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AttributeContext_Peer {
    // message fields
    pub address: ::protobuf::SingularPtrField<super::address::Address>,
    pub service: ::std::string::String,
    pub labels: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub principal: ::std::string::String,
    pub certificate: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AttributeContext_Peer {
    fn default() -> &'a AttributeContext_Peer {
        <AttributeContext_Peer as ::protobuf::Message>::default_instance()
    }
}

impl AttributeContext_Peer {
    pub fn new() -> AttributeContext_Peer {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Address address = 1;


    pub fn get_address(&self) -> &super::address::Address {
        self.address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::Address) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::address::Address {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::Address {
        self.address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // string service = 2;


    pub fn get_service(&self) -> &str {
        &self.service
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ::std::string::String) {
        self.service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ::std::string::String {
        &mut self.service
    }

    // Take field
    pub fn take_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service, ::std::string::String::new())
    }

    // repeated .envoy.service.auth.v3.AttributeContext.Peer.LabelsEntry labels = 3;


    pub fn get_labels(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.labels
    }
    pub fn clear_labels(&mut self) {
        self.labels.clear();
    }

    // Param is passed by value, moved
    pub fn set_labels(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.labels = v;
    }

    // Mutable pointer to the field.
    pub fn mut_labels(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.labels
    }

    // Take field
    pub fn take_labels(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.labels, ::std::collections::HashMap::new())
    }

    // string principal = 4;


    pub fn get_principal(&self) -> &str {
        &self.principal
    }
    pub fn clear_principal(&mut self) {
        self.principal.clear();
    }

    // Param is passed by value, moved
    pub fn set_principal(&mut self, v: ::std::string::String) {
        self.principal = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_principal(&mut self) -> &mut ::std::string::String {
        &mut self.principal
    }

    // Take field
    pub fn take_principal(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.principal, ::std::string::String::new())
    }

    // string certificate = 5;


    pub fn get_certificate(&self) -> &str {
        &self.certificate
    }
    pub fn clear_certificate(&mut self) {
        self.certificate.clear();
    }

    // Param is passed by value, moved
    pub fn set_certificate(&mut self, v: ::std::string::String) {
        self.certificate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_certificate(&mut self) -> &mut ::std::string::String {
        &mut self.certificate
    }

    // Take field
    pub fn take_certificate(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.certificate, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AttributeContext_Peer {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.labels)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.principal)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.certificate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.service);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.labels);
        if !self.principal.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.principal);
        }
        if !self.certificate.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.certificate);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.service.is_empty() {
            os.write_string(2, &self.service)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.labels, os)?;
        if !self.principal.is_empty() {
            os.write_string(4, &self.principal)?;
        }
        if !self.certificate.is_empty() {
            os.write_string(5, &self.certificate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AttributeContext_Peer {
        AttributeContext_Peer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "address",
                |m: &AttributeContext_Peer| { &m.address },
                |m: &mut AttributeContext_Peer| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service",
                |m: &AttributeContext_Peer| { &m.service },
                |m: &mut AttributeContext_Peer| { &mut m.service },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "labels",
                |m: &AttributeContext_Peer| { &m.labels },
                |m: &mut AttributeContext_Peer| { &mut m.labels },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "principal",
                |m: &AttributeContext_Peer| { &m.principal },
                |m: &mut AttributeContext_Peer| { &mut m.principal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "certificate",
                |m: &AttributeContext_Peer| { &m.certificate },
                |m: &mut AttributeContext_Peer| { &mut m.certificate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AttributeContext_Peer>(
                "AttributeContext.Peer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AttributeContext_Peer {
        static instance: ::protobuf::rt::LazyV2<AttributeContext_Peer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AttributeContext_Peer::new)
    }
}

impl ::protobuf::Clear for AttributeContext_Peer {
    fn clear(&mut self) {
        self.address.clear();
        self.service.clear();
        self.labels.clear();
        self.principal.clear();
        self.certificate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AttributeContext_Peer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttributeContext_Peer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AttributeContext_Request {
    // message fields
    pub time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub http: ::protobuf::SingularPtrField<AttributeContext_HttpRequest>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AttributeContext_Request {
    fn default() -> &'a AttributeContext_Request {
        <AttributeContext_Request as ::protobuf::Message>::default_instance()
    }
}

impl AttributeContext_Request {
    pub fn new() -> AttributeContext_Request {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp time = 1;


    pub fn get_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time(&mut self) {
        self.time.clear();
    }

    pub fn has_time(&self) -> bool {
        self.time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.time.is_none() {
            self.time.set_default();
        }
        self.time.as_mut().unwrap()
    }

    // Take field
    pub fn take_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .envoy.service.auth.v3.AttributeContext.HttpRequest http = 2;


    pub fn get_http(&self) -> &AttributeContext_HttpRequest {
        self.http.as_ref().unwrap_or_else(|| <AttributeContext_HttpRequest as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http(&mut self) {
        self.http.clear();
    }

    pub fn has_http(&self) -> bool {
        self.http.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http(&mut self, v: AttributeContext_HttpRequest) {
        self.http = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http(&mut self) -> &mut AttributeContext_HttpRequest {
        if self.http.is_none() {
            self.http.set_default();
        }
        self.http.as_mut().unwrap()
    }

    // Take field
    pub fn take_http(&mut self) -> AttributeContext_HttpRequest {
        self.http.take().unwrap_or_else(|| AttributeContext_HttpRequest::new())
    }
}

impl ::protobuf::Message for AttributeContext_Request {
    fn is_initialized(&self) -> bool {
        for v in &self.time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.http {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.http.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.time.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.http.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AttributeContext_Request {
        AttributeContext_Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "time",
                |m: &AttributeContext_Request| { &m.time },
                |m: &mut AttributeContext_Request| { &mut m.time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AttributeContext_HttpRequest>>(
                "http",
                |m: &AttributeContext_Request| { &m.http },
                |m: &mut AttributeContext_Request| { &mut m.http },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AttributeContext_Request>(
                "AttributeContext.Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AttributeContext_Request {
        static instance: ::protobuf::rt::LazyV2<AttributeContext_Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AttributeContext_Request::new)
    }
}

impl ::protobuf::Clear for AttributeContext_Request {
    fn clear(&mut self) {
        self.time.clear();
        self.http.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AttributeContext_Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttributeContext_Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AttributeContext_HttpRequest {
    // message fields
    pub id: ::std::string::String,
    pub method: ::std::string::String,
    pub headers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub path: ::std::string::String,
    pub host: ::std::string::String,
    pub scheme: ::std::string::String,
    pub query: ::std::string::String,
    pub fragment: ::std::string::String,
    pub size: i64,
    pub protocol: ::std::string::String,
    pub body: ::std::string::String,
    pub raw_body: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AttributeContext_HttpRequest {
    fn default() -> &'a AttributeContext_HttpRequest {
        <AttributeContext_HttpRequest as ::protobuf::Message>::default_instance()
    }
}

impl AttributeContext_HttpRequest {
    pub fn new() -> AttributeContext_HttpRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string method = 2;


    pub fn get_method(&self) -> &str {
        &self.method
    }
    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: ::std::string::String) {
        self.method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut ::std::string::String {
        &mut self.method
    }

    // Take field
    pub fn take_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.method, ::std::string::String::new())
    }

    // repeated .envoy.service.auth.v3.AttributeContext.HttpRequest.HeadersEntry headers = 3;


    pub fn get_headers(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.headers, ::std::collections::HashMap::new())
    }

    // string path = 4;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string host = 5;


    pub fn get_host(&self) -> &str {
        &self.host
    }
    pub fn clear_host(&mut self) {
        self.host.clear();
    }

    // Param is passed by value, moved
    pub fn set_host(&mut self, v: ::std::string::String) {
        self.host = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host(&mut self) -> &mut ::std::string::String {
        &mut self.host
    }

    // Take field
    pub fn take_host(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host, ::std::string::String::new())
    }

    // string scheme = 6;


    pub fn get_scheme(&self) -> &str {
        &self.scheme
    }
    pub fn clear_scheme(&mut self) {
        self.scheme.clear();
    }

    // Param is passed by value, moved
    pub fn set_scheme(&mut self, v: ::std::string::String) {
        self.scheme = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheme(&mut self) -> &mut ::std::string::String {
        &mut self.scheme
    }

    // Take field
    pub fn take_scheme(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scheme, ::std::string::String::new())
    }

    // string query = 7;


    pub fn get_query(&self) -> &str {
        &self.query
    }
    pub fn clear_query(&mut self) {
        self.query.clear();
    }

    // Param is passed by value, moved
    pub fn set_query(&mut self, v: ::std::string::String) {
        self.query = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_query(&mut self) -> &mut ::std::string::String {
        &mut self.query
    }

    // Take field
    pub fn take_query(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.query, ::std::string::String::new())
    }

    // string fragment = 8;


    pub fn get_fragment(&self) -> &str {
        &self.fragment
    }
    pub fn clear_fragment(&mut self) {
        self.fragment.clear();
    }

    // Param is passed by value, moved
    pub fn set_fragment(&mut self, v: ::std::string::String) {
        self.fragment = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fragment(&mut self) -> &mut ::std::string::String {
        &mut self.fragment
    }

    // Take field
    pub fn take_fragment(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.fragment, ::std::string::String::new())
    }

    // int64 size = 9;


    pub fn get_size(&self) -> i64 {
        self.size
    }
    pub fn clear_size(&mut self) {
        self.size = 0;
    }

    // Param is passed by value, moved
    pub fn set_size(&mut self, v: i64) {
        self.size = v;
    }

    // string protocol = 10;


    pub fn get_protocol(&self) -> &str {
        &self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol.clear();
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ::std::string::String) {
        self.protocol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_protocol(&mut self) -> &mut ::std::string::String {
        &mut self.protocol
    }

    // Take field
    pub fn take_protocol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.protocol, ::std::string::String::new())
    }

    // string body = 11;


    pub fn get_body(&self) -> &str {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::string::String) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::string::String {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.body, ::std::string::String::new())
    }

    // bytes raw_body = 12;


    pub fn get_raw_body(&self) -> &[u8] {
        &self.raw_body
    }
    pub fn clear_raw_body(&mut self) {
        self.raw_body.clear();
    }

    // Param is passed by value, moved
    pub fn set_raw_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.raw_body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_raw_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.raw_body
    }

    // Take field
    pub fn take_raw_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.raw_body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AttributeContext_HttpRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.method)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.headers)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scheme)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.query)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.fragment)?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.size = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.protocol)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.body)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.raw_body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.method.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.method);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.headers);
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.path);
        }
        if !self.host.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.host);
        }
        if !self.scheme.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.scheme);
        }
        if !self.query.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.query);
        }
        if !self.fragment.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.fragment);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::value_size(9, self.size, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.protocol);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.body);
        }
        if !self.raw_body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.raw_body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.method.is_empty() {
            os.write_string(2, &self.method)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.headers, os)?;
        if !self.path.is_empty() {
            os.write_string(4, &self.path)?;
        }
        if !self.host.is_empty() {
            os.write_string(5, &self.host)?;
        }
        if !self.scheme.is_empty() {
            os.write_string(6, &self.scheme)?;
        }
        if !self.query.is_empty() {
            os.write_string(7, &self.query)?;
        }
        if !self.fragment.is_empty() {
            os.write_string(8, &self.fragment)?;
        }
        if self.size != 0 {
            os.write_int64(9, self.size)?;
        }
        if !self.protocol.is_empty() {
            os.write_string(10, &self.protocol)?;
        }
        if !self.body.is_empty() {
            os.write_string(11, &self.body)?;
        }
        if !self.raw_body.is_empty() {
            os.write_bytes(12, &self.raw_body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AttributeContext_HttpRequest {
        AttributeContext_HttpRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &AttributeContext_HttpRequest| { &m.id },
                |m: &mut AttributeContext_HttpRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "method",
                |m: &AttributeContext_HttpRequest| { &m.method },
                |m: &mut AttributeContext_HttpRequest| { &mut m.method },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "headers",
                |m: &AttributeContext_HttpRequest| { &m.headers },
                |m: &mut AttributeContext_HttpRequest| { &mut m.headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &AttributeContext_HttpRequest| { &m.path },
                |m: &mut AttributeContext_HttpRequest| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host",
                |m: &AttributeContext_HttpRequest| { &m.host },
                |m: &mut AttributeContext_HttpRequest| { &mut m.host },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scheme",
                |m: &AttributeContext_HttpRequest| { &m.scheme },
                |m: &mut AttributeContext_HttpRequest| { &mut m.scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "query",
                |m: &AttributeContext_HttpRequest| { &m.query },
                |m: &mut AttributeContext_HttpRequest| { &mut m.query },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fragment",
                |m: &AttributeContext_HttpRequest| { &m.fragment },
                |m: &mut AttributeContext_HttpRequest| { &mut m.fragment },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "size",
                |m: &AttributeContext_HttpRequest| { &m.size },
                |m: &mut AttributeContext_HttpRequest| { &mut m.size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "protocol",
                |m: &AttributeContext_HttpRequest| { &m.protocol },
                |m: &mut AttributeContext_HttpRequest| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "body",
                |m: &AttributeContext_HttpRequest| { &m.body },
                |m: &mut AttributeContext_HttpRequest| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "raw_body",
                |m: &AttributeContext_HttpRequest| { &m.raw_body },
                |m: &mut AttributeContext_HttpRequest| { &mut m.raw_body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AttributeContext_HttpRequest>(
                "AttributeContext.HttpRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AttributeContext_HttpRequest {
        static instance: ::protobuf::rt::LazyV2<AttributeContext_HttpRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AttributeContext_HttpRequest::new)
    }
}

impl ::protobuf::Clear for AttributeContext_HttpRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.method.clear();
        self.headers.clear();
        self.path.clear();
        self.host.clear();
        self.scheme.clear();
        self.query.clear();
        self.fragment.clear();
        self.size = 0;
        self.protocol.clear();
        self.body.clear();
        self.raw_body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AttributeContext_HttpRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttributeContext_HttpRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-envoy/service/auth/v3/attribute_context.proto\x12\x15envoy.service.au\
    th.v3\x1a\"envoy/config/core/v3/address.proto\x1a\x1fenvoy/config/core/v\
    3/base.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1dudpa/annotati\
    ons/status.proto\x1a!udpa/annotations/versioning.proto\"\x97\x0c\n\x10At\
    tributeContext\x12D\n\x06source\x18\x01\x20\x01(\x0b2,.envoy.service.aut\
    h.v3.AttributeContext.PeerR\x06source\x12N\n\x0bdestination\x18\x02\x20\
    \x01(\x0b2,.envoy.service.auth.v3.AttributeContext.PeerR\x0bdestination\
    \x12I\n\x07request\x18\x04\x20\x01(\x0b2/.envoy.service.auth.v3.Attribut\
    eContext.RequestR\x07request\x12m\n\x12context_extensions\x18\n\x20\x03(\
    \x0b2>.envoy.service.auth.v3.AttributeContext.ContextExtensionsEntryR\
    \x11contextExtensions\x12I\n\x10metadata_context\x18\x0b\x20\x01(\x0b2\
    \x1e.envoy.config.core.v3.MetadataR\x0fmetadataContext\x1a\xda\x02\n\x04\
    Peer\x127\n\x07address\x18\x01\x20\x01(\x0b2\x1d.envoy.config.core.v3.Ad\
    dressR\x07address\x12\x18\n\x07service\x18\x02\x20\x01(\tR\x07service\
    \x12P\n\x06labels\x18\x03\x20\x03(\x0b28.envoy.service.auth.v3.Attribute\
    Context.Peer.LabelsEntryR\x06labels\x12\x1c\n\tprincipal\x18\x04\x20\x01\
    (\tR\tprincipal\x12\x20\n\x0bcertificate\x18\x05\x20\x01(\tR\x0bcertific\
    ate\x1a9\n\x0bLabelsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01:2\x9a\xc5\x88\
    \x1e-\n+envoy.service.auth.v2.AttributeContext.Peer\x1a\xb9\x01\n\x07Req\
    uest\x12.\n\x04time\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\
    \x04time\x12G\n\x04http\x18\x02\x20\x01(\x0b23.envoy.service.auth.v3.Att\
    ributeContext.HttpRequestR\x04http:5\x9a\xc5\x88\x1e0\n.envoy.service.au\
    th.v2.AttributeContext.Request\x1a\xd9\x03\n\x0bHttpRequest\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x12\x16\n\x06method\x18\x02\x20\x01(\tR\
    \x06method\x12Z\n\x07headers\x18\x03\x20\x03(\x0b2@.envoy.service.auth.v\
    3.AttributeContext.HttpRequest.HeadersEntryR\x07headers\x12\x12\n\x04pat\
    h\x18\x04\x20\x01(\tR\x04path\x12\x12\n\x04host\x18\x05\x20\x01(\tR\x04h\
    ost\x12\x16\n\x06scheme\x18\x06\x20\x01(\tR\x06scheme\x12\x14\n\x05query\
    \x18\x07\x20\x01(\tR\x05query\x12\x1a\n\x08fragment\x18\x08\x20\x01(\tR\
    \x08fragment\x12\x12\n\x04size\x18\t\x20\x01(\x03R\x04size\x12\x1a\n\x08\
    protocol\x18\n\x20\x01(\tR\x08protocol\x12\x12\n\x04body\x18\x0b\x20\x01\
    (\tR\x04body\x12\x19\n\x08raw_body\x18\x0c\x20\x01(\x0cR\x07rawBody\x1a:\
    \n\x0cHeadersEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01:9\x9a\xc5\x88\x1e4\n2en\
    voy.service.auth.v2.AttributeContext.HttpRequest\x1aD\n\x16ContextExtens\
    ionsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01:-\x9a\xc5\x88\x1e(\n&envoy.servi\
    ce.auth.v2.AttributeContextBF\n#io.envoyproxy.envoy.service.auth.v3B\x15\
    AttributeContextProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
