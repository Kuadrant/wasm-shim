// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/type/matcher/v3/string.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct StringMatcher {
    // message fields
    pub ignore_case: bool,
    // message oneof groups
    pub match_pattern: ::std::option::Option<StringMatcher_oneof_match_pattern>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringMatcher {
    fn default() -> &'a StringMatcher {
        <StringMatcher as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum StringMatcher_oneof_match_pattern {
    exact(::std::string::String),
    prefix(::std::string::String),
    suffix(::std::string::String),
    safe_regex(super::regex::RegexMatcher),
    contains(::std::string::String),
}

impl StringMatcher {
    pub fn new() -> StringMatcher {
        ::std::default::Default::default()
    }

    // string exact = 1;


    pub fn get_exact(&self) -> &str {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::exact(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_exact(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_exact(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::exact(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exact(&mut self, v: ::std::string::String) {
        self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::exact(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exact(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(StringMatcher_oneof_match_pattern::exact(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::exact(::std::string::String::new()));
        }
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::exact(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exact(&mut self) -> ::std::string::String {
        if self.has_exact() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(StringMatcher_oneof_match_pattern::exact(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string prefix = 2;


    pub fn get_prefix(&self) -> &str {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::prefix(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_prefix(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_prefix(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::prefix(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::prefix(v))
    }

    // Mutable pointer to the field.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(StringMatcher_oneof_match_pattern::prefix(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::prefix(::std::string::String::new()));
        }
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::prefix(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        if self.has_prefix() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(StringMatcher_oneof_match_pattern::prefix(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string suffix = 3;


    pub fn get_suffix(&self) -> &str {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::suffix(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_suffix(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_suffix(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::suffix(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_suffix(&mut self, v: ::std::string::String) {
        self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::suffix(v))
    }

    // Mutable pointer to the field.
    pub fn mut_suffix(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(StringMatcher_oneof_match_pattern::suffix(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::suffix(::std::string::String::new()));
        }
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::suffix(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_suffix(&mut self) -> ::std::string::String {
        if self.has_suffix() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(StringMatcher_oneof_match_pattern::suffix(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.type.matcher.v3.RegexMatcher safe_regex = 5;


    pub fn get_safe_regex(&self) -> &super::regex::RegexMatcher {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::safe_regex(ref v)) => v,
            _ => <super::regex::RegexMatcher as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_safe_regex(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_safe_regex(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::safe_regex(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_safe_regex(&mut self, v: super::regex::RegexMatcher) {
        self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::safe_regex(v))
    }

    // Mutable pointer to the field.
    pub fn mut_safe_regex(&mut self) -> &mut super::regex::RegexMatcher {
        if let ::std::option::Option::Some(StringMatcher_oneof_match_pattern::safe_regex(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::safe_regex(super::regex::RegexMatcher::new()));
        }
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::safe_regex(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_safe_regex(&mut self) -> super::regex::RegexMatcher {
        if self.has_safe_regex() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(StringMatcher_oneof_match_pattern::safe_regex(v)) => v,
                _ => panic!(),
            }
        } else {
            super::regex::RegexMatcher::new()
        }
    }

    // string contains = 7;


    pub fn get_contains(&self) -> &str {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::contains(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_contains(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_contains(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::contains(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contains(&mut self, v: ::std::string::String) {
        self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::contains(v))
    }

    // Mutable pointer to the field.
    pub fn mut_contains(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(StringMatcher_oneof_match_pattern::contains(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::contains(::std::string::String::new()));
        }
        match self.match_pattern {
            ::std::option::Option::Some(StringMatcher_oneof_match_pattern::contains(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_contains(&mut self) -> ::std::string::String {
        if self.has_contains() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(StringMatcher_oneof_match_pattern::contains(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bool ignore_case = 6;


    pub fn get_ignore_case(&self) -> bool {
        self.ignore_case
    }
    pub fn clear_ignore_case(&mut self) {
        self.ignore_case = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_case(&mut self, v: bool) {
        self.ignore_case = v;
    }
}

impl ::protobuf::Message for StringMatcher {
    fn is_initialized(&self) -> bool {
        if let Some(StringMatcher_oneof_match_pattern::safe_regex(ref v)) = self.match_pattern {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::exact(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::prefix(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::suffix(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::safe_regex(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(StringMatcher_oneof_match_pattern::contains(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_case = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.ignore_case != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.match_pattern {
            match v {
                &StringMatcher_oneof_match_pattern::exact(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &StringMatcher_oneof_match_pattern::prefix(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &StringMatcher_oneof_match_pattern::suffix(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &StringMatcher_oneof_match_pattern::safe_regex(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StringMatcher_oneof_match_pattern::contains(ref v) => {
                    my_size += ::protobuf::rt::string_size(7, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.ignore_case != false {
            os.write_bool(6, self.ignore_case)?;
        }
        if let ::std::option::Option::Some(ref v) = self.match_pattern {
            match v {
                &StringMatcher_oneof_match_pattern::exact(ref v) => {
                    os.write_string(1, v)?;
                },
                &StringMatcher_oneof_match_pattern::prefix(ref v) => {
                    os.write_string(2, v)?;
                },
                &StringMatcher_oneof_match_pattern::suffix(ref v) => {
                    os.write_string(3, v)?;
                },
                &StringMatcher_oneof_match_pattern::safe_regex(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StringMatcher_oneof_match_pattern::contains(ref v) => {
                    os.write_string(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringMatcher {
        StringMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "exact",
                StringMatcher::has_exact,
                StringMatcher::get_exact,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "prefix",
                StringMatcher::has_prefix,
                StringMatcher::get_prefix,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "suffix",
                StringMatcher::has_suffix,
                StringMatcher::get_suffix,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::regex::RegexMatcher>(
                "safe_regex",
                StringMatcher::has_safe_regex,
                StringMatcher::get_safe_regex,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "contains",
                StringMatcher::has_contains,
                StringMatcher::get_contains,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_case",
                |m: &StringMatcher| { &m.ignore_case },
                |m: &mut StringMatcher| { &mut m.ignore_case },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringMatcher>(
                "StringMatcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringMatcher {
        static instance: ::protobuf::rt::LazyV2<StringMatcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringMatcher::new)
    }
}

impl ::protobuf::Clear for StringMatcher {
    fn clear(&mut self) {
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.ignore_case = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ListStringMatcher {
    // message fields
    pub patterns: ::protobuf::RepeatedField<StringMatcher>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListStringMatcher {
    fn default() -> &'a ListStringMatcher {
        <ListStringMatcher as ::protobuf::Message>::default_instance()
    }
}

impl ListStringMatcher {
    pub fn new() -> ListStringMatcher {
        ::std::default::Default::default()
    }

    // repeated .envoy.type.matcher.v3.StringMatcher patterns = 1;


    pub fn get_patterns(&self) -> &[StringMatcher] {
        &self.patterns
    }
    pub fn clear_patterns(&mut self) {
        self.patterns.clear();
    }

    // Param is passed by value, moved
    pub fn set_patterns(&mut self, v: ::protobuf::RepeatedField<StringMatcher>) {
        self.patterns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_patterns(&mut self) -> &mut ::protobuf::RepeatedField<StringMatcher> {
        &mut self.patterns
    }

    // Take field
    pub fn take_patterns(&mut self) -> ::protobuf::RepeatedField<StringMatcher> {
        ::std::mem::replace(&mut self.patterns, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListStringMatcher {
    fn is_initialized(&self) -> bool {
        for v in &self.patterns {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.patterns)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.patterns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.patterns {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListStringMatcher {
        ListStringMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StringMatcher>>(
                "patterns",
                |m: &ListStringMatcher| { &m.patterns },
                |m: &mut ListStringMatcher| { &mut m.patterns },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListStringMatcher>(
                "ListStringMatcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListStringMatcher {
        static instance: ::protobuf::rt::LazyV2<ListStringMatcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListStringMatcher::new)
    }
}

impl ::protobuf::Clear for ListStringMatcher {
    fn clear(&mut self) {
        self.patterns.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListStringMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListStringMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"envoy/type/matcher/v3/string.proto\x12\x15envoy.type.matcher.v3\x1a!\
    envoy/type/matcher/v3/regex.proto\x1a\x1dudpa/annotations/status.proto\
    \x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\
    \xd1\x02\n\rStringMatcher\x12\x16\n\x05exact\x18\x01\x20\x01(\tH\0R\x05e\
    xact\x12!\n\x06prefix\x18\x02\x20\x01(\tH\0R\x06prefixB\x07\xfaB\x04r\
    \x02\x10\x01\x12!\n\x06suffix\x18\x03\x20\x01(\tH\0R\x06suffixB\x07\xfaB\
    \x04r\x02\x10\x01\x12N\n\nsafe_regex\x18\x05\x20\x01(\x0b2#.envoy.type.m\
    atcher.v3.RegexMatcherH\0R\tsafeRegexB\x08\xfaB\x05\x8a\x01\x02\x10\x01\
    \x12%\n\x08contains\x18\x07\x20\x01(\tH\0R\x08containsB\x07\xfaB\x04r\
    \x02\x10\x01\x12\x1f\n\x0bignore_case\x18\x06\x20\x01(\x08R\nignoreCaseB\
    \x14\n\rmatch_pattern\x12\x03\xf8B\x01:'\x9a\xc5\x88\x1e\"\n\x20envoy.ty\
    pe.matcher.StringMatcherJ\x04\x08\x04\x10\x05R\x05regex\"\x8c\x01\n\x11L\
    istStringMatcher\x12J\n\x08patterns\x18\x01\x20\x03(\x0b2$.envoy.type.ma\
    tcher.v3.StringMatcherR\x08patternsB\x08\xfaB\x05\x92\x01\x02\x08\x01:+\
    \x9a\xc5\x88\x1e&\n$envoy.type.matcher.ListStringMatcherB<\n#io.envoypro\
    xy.envoy.type.matcher.v3B\x0bStringProtoP\x01\xba\x80\xc8\xd1\x06\x02\
    \x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
