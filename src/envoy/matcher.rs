// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/common/matcher/v3/matcher.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Matcher {
    // message fields
    pub on_no_match: ::protobuf::SingularPtrField<Matcher_OnMatch>,
    // message oneof groups
    pub matcher_type: ::std::option::Option<Matcher_oneof_matcher_type>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Matcher {
    fn default() -> &'a Matcher {
        <Matcher as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Matcher_oneof_matcher_type {
    matcher_list(Matcher_MatcherList),
    matcher_tree(Matcher_MatcherTree),
}

impl Matcher {
    pub fn new() -> Matcher {
        ::std::default::Default::default()
    }

    // .envoy.config.common.matcher.v3.Matcher.MatcherList matcher_list = 1;


    pub fn get_matcher_list(&self) -> &Matcher_MatcherList {
        match self.matcher_type {
            ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_list(ref v)) => v,
            _ => <Matcher_MatcherList as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_matcher_list(&mut self) {
        self.matcher_type = ::std::option::Option::None;
    }

    pub fn has_matcher_list(&self) -> bool {
        match self.matcher_type {
            ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_list(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_matcher_list(&mut self, v: Matcher_MatcherList) {
        self.matcher_type = ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_list(v))
    }

    // Mutable pointer to the field.
    pub fn mut_matcher_list(&mut self) -> &mut Matcher_MatcherList {
        if let ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_list(_)) = self.matcher_type {
        } else {
            self.matcher_type = ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_list(Matcher_MatcherList::new()));
        }
        match self.matcher_type {
            ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_list(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_matcher_list(&mut self) -> Matcher_MatcherList {
        if self.has_matcher_list() {
            match self.matcher_type.take() {
                ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_list(v)) => v,
                _ => panic!(),
            }
        } else {
            Matcher_MatcherList::new()
        }
    }

    // .envoy.config.common.matcher.v3.Matcher.MatcherTree matcher_tree = 2;


    pub fn get_matcher_tree(&self) -> &Matcher_MatcherTree {
        match self.matcher_type {
            ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_tree(ref v)) => v,
            _ => <Matcher_MatcherTree as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_matcher_tree(&mut self) {
        self.matcher_type = ::std::option::Option::None;
    }

    pub fn has_matcher_tree(&self) -> bool {
        match self.matcher_type {
            ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_tree(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_matcher_tree(&mut self, v: Matcher_MatcherTree) {
        self.matcher_type = ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_tree(v))
    }

    // Mutable pointer to the field.
    pub fn mut_matcher_tree(&mut self) -> &mut Matcher_MatcherTree {
        if let ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_tree(_)) = self.matcher_type {
        } else {
            self.matcher_type = ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_tree(Matcher_MatcherTree::new()));
        }
        match self.matcher_type {
            ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_tree(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_matcher_tree(&mut self) -> Matcher_MatcherTree {
        if self.has_matcher_tree() {
            match self.matcher_type.take() {
                ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_tree(v)) => v,
                _ => panic!(),
            }
        } else {
            Matcher_MatcherTree::new()
        }
    }

    // .envoy.config.common.matcher.v3.Matcher.OnMatch on_no_match = 3;


    pub fn get_on_no_match(&self) -> &Matcher_OnMatch {
        self.on_no_match.as_ref().unwrap_or_else(|| <Matcher_OnMatch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_on_no_match(&mut self) {
        self.on_no_match.clear();
    }

    pub fn has_on_no_match(&self) -> bool {
        self.on_no_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_on_no_match(&mut self, v: Matcher_OnMatch) {
        self.on_no_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_on_no_match(&mut self) -> &mut Matcher_OnMatch {
        if self.on_no_match.is_none() {
            self.on_no_match.set_default();
        }
        self.on_no_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_on_no_match(&mut self) -> Matcher_OnMatch {
        self.on_no_match.take().unwrap_or_else(|| Matcher_OnMatch::new())
    }
}

impl ::protobuf::Message for Matcher {
    fn is_initialized(&self) -> bool {
        if let Some(Matcher_oneof_matcher_type::matcher_list(ref v)) = self.matcher_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Matcher_oneof_matcher_type::matcher_tree(ref v)) = self.matcher_type {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.on_no_match {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.matcher_type = ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_list(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.matcher_type = ::std::option::Option::Some(Matcher_oneof_matcher_type::matcher_tree(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.on_no_match)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.on_no_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.matcher_type {
            match v {
                &Matcher_oneof_matcher_type::matcher_list(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Matcher_oneof_matcher_type::matcher_tree(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.on_no_match.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.matcher_type {
            match v {
                &Matcher_oneof_matcher_type::matcher_list(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Matcher_oneof_matcher_type::matcher_tree(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Matcher {
        Matcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Matcher_MatcherList>(
                "matcher_list",
                Matcher::has_matcher_list,
                Matcher::get_matcher_list,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Matcher_MatcherTree>(
                "matcher_tree",
                Matcher::has_matcher_tree,
                Matcher::get_matcher_tree,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Matcher_OnMatch>>(
                "on_no_match",
                |m: &Matcher| { &m.on_no_match },
                |m: &mut Matcher| { &mut m.on_no_match },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Matcher>(
                "Matcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Matcher {
        static instance: ::protobuf::rt::LazyV2<Matcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Matcher::new)
    }
}

impl ::protobuf::Clear for Matcher {
    fn clear(&mut self) {
        self.matcher_type = ::std::option::Option::None;
        self.matcher_type = ::std::option::Option::None;
        self.on_no_match.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Matcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Matcher_OnMatch {
    // message oneof groups
    pub on_match: ::std::option::Option<Matcher_OnMatch_oneof_on_match>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Matcher_OnMatch {
    fn default() -> &'a Matcher_OnMatch {
        <Matcher_OnMatch as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Matcher_OnMatch_oneof_on_match {
    matcher(Matcher),
    action(super::extension::TypedExtensionConfig),
}

impl Matcher_OnMatch {
    pub fn new() -> Matcher_OnMatch {
        ::std::default::Default::default()
    }

    // .envoy.config.common.matcher.v3.Matcher matcher = 1;


    pub fn get_matcher(&self) -> &Matcher {
        match self.on_match {
            ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::matcher(ref v)) => v,
            _ => <Matcher as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_matcher(&mut self) {
        self.on_match = ::std::option::Option::None;
    }

    pub fn has_matcher(&self) -> bool {
        match self.on_match {
            ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::matcher(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_matcher(&mut self, v: Matcher) {
        self.on_match = ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::matcher(v))
    }

    // Mutable pointer to the field.
    pub fn mut_matcher(&mut self) -> &mut Matcher {
        if let ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::matcher(_)) = self.on_match {
        } else {
            self.on_match = ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::matcher(Matcher::new()));
        }
        match self.on_match {
            ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::matcher(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_matcher(&mut self) -> Matcher {
        if self.has_matcher() {
            match self.on_match.take() {
                ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::matcher(v)) => v,
                _ => panic!(),
            }
        } else {
            Matcher::new()
        }
    }

    // .envoy.config.core.v3.TypedExtensionConfig action = 2;


    pub fn get_action(&self) -> &super::extension::TypedExtensionConfig {
        match self.on_match {
            ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::action(ref v)) => v,
            _ => <super::extension::TypedExtensionConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_action(&mut self) {
        self.on_match = ::std::option::Option::None;
    }

    pub fn has_action(&self) -> bool {
        match self.on_match {
            ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::action(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: super::extension::TypedExtensionConfig) {
        self.on_match = ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::action(v))
    }

    // Mutable pointer to the field.
    pub fn mut_action(&mut self) -> &mut super::extension::TypedExtensionConfig {
        if let ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::action(_)) = self.on_match {
        } else {
            self.on_match = ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::action(super::extension::TypedExtensionConfig::new()));
        }
        match self.on_match {
            ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::action(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_action(&mut self) -> super::extension::TypedExtensionConfig {
        if self.has_action() {
            match self.on_match.take() {
                ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::action(v)) => v,
                _ => panic!(),
            }
        } else {
            super::extension::TypedExtensionConfig::new()
        }
    }
}

impl ::protobuf::Message for Matcher_OnMatch {
    fn is_initialized(&self) -> bool {
        if let Some(Matcher_OnMatch_oneof_on_match::matcher(ref v)) = self.on_match {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Matcher_OnMatch_oneof_on_match::action(ref v)) = self.on_match {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.on_match = ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::matcher(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.on_match = ::std::option::Option::Some(Matcher_OnMatch_oneof_on_match::action(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.on_match {
            match v {
                &Matcher_OnMatch_oneof_on_match::matcher(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Matcher_OnMatch_oneof_on_match::action(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.on_match {
            match v {
                &Matcher_OnMatch_oneof_on_match::matcher(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Matcher_OnMatch_oneof_on_match::action(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Matcher_OnMatch {
        Matcher_OnMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Matcher>(
                "matcher",
                Matcher_OnMatch::has_matcher,
                Matcher_OnMatch::get_matcher,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::extension::TypedExtensionConfig>(
                "action",
                Matcher_OnMatch::has_action,
                Matcher_OnMatch::get_action,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Matcher_OnMatch>(
                "Matcher.OnMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Matcher_OnMatch {
        static instance: ::protobuf::rt::LazyV2<Matcher_OnMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Matcher_OnMatch::new)
    }
}

impl ::protobuf::Clear for Matcher_OnMatch {
    fn clear(&mut self) {
        self.on_match = ::std::option::Option::None;
        self.on_match = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Matcher_OnMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher_OnMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Matcher_MatcherList {
    // message fields
    pub matchers: ::protobuf::RepeatedField<Matcher_MatcherList_FieldMatcher>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Matcher_MatcherList {
    fn default() -> &'a Matcher_MatcherList {
        <Matcher_MatcherList as ::protobuf::Message>::default_instance()
    }
}

impl Matcher_MatcherList {
    pub fn new() -> Matcher_MatcherList {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcher matchers = 1;


    pub fn get_matchers(&self) -> &[Matcher_MatcherList_FieldMatcher] {
        &self.matchers
    }
    pub fn clear_matchers(&mut self) {
        self.matchers.clear();
    }

    // Param is passed by value, moved
    pub fn set_matchers(&mut self, v: ::protobuf::RepeatedField<Matcher_MatcherList_FieldMatcher>) {
        self.matchers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_matchers(&mut self) -> &mut ::protobuf::RepeatedField<Matcher_MatcherList_FieldMatcher> {
        &mut self.matchers
    }

    // Take field
    pub fn take_matchers(&mut self) -> ::protobuf::RepeatedField<Matcher_MatcherList_FieldMatcher> {
        ::std::mem::replace(&mut self.matchers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Matcher_MatcherList {
    fn is_initialized(&self) -> bool {
        for v in &self.matchers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.matchers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.matchers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.matchers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Matcher_MatcherList {
        Matcher_MatcherList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Matcher_MatcherList_FieldMatcher>>(
                "matchers",
                |m: &Matcher_MatcherList| { &m.matchers },
                |m: &mut Matcher_MatcherList| { &mut m.matchers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Matcher_MatcherList>(
                "Matcher.MatcherList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Matcher_MatcherList {
        static instance: ::protobuf::rt::LazyV2<Matcher_MatcherList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Matcher_MatcherList::new)
    }
}

impl ::protobuf::Clear for Matcher_MatcherList {
    fn clear(&mut self) {
        self.matchers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Matcher_MatcherList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher_MatcherList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Matcher_MatcherList_Predicate {
    // message oneof groups
    pub match_type: ::std::option::Option<Matcher_MatcherList_Predicate_oneof_match_type>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Matcher_MatcherList_Predicate {
    fn default() -> &'a Matcher_MatcherList_Predicate {
        <Matcher_MatcherList_Predicate as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Matcher_MatcherList_Predicate_oneof_match_type {
    single_predicate(Matcher_MatcherList_Predicate_SinglePredicate),
    or_matcher(Matcher_MatcherList_Predicate_PredicateList),
    and_matcher(Matcher_MatcherList_Predicate_PredicateList),
    not_matcher(::std::boxed::Box<Matcher_MatcherList_Predicate>),
}

impl Matcher_MatcherList_Predicate {
    pub fn new() -> Matcher_MatcherList_Predicate {
        ::std::default::Default::default()
    }

    // .envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.SinglePredicate single_predicate = 1;


    pub fn get_single_predicate(&self) -> &Matcher_MatcherList_Predicate_SinglePredicate {
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(ref v)) => v,
            _ => <Matcher_MatcherList_Predicate_SinglePredicate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_single_predicate(&mut self) {
        self.match_type = ::std::option::Option::None;
    }

    pub fn has_single_predicate(&self) -> bool {
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_single_predicate(&mut self, v: Matcher_MatcherList_Predicate_SinglePredicate) {
        self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_single_predicate(&mut self) -> &mut Matcher_MatcherList_Predicate_SinglePredicate {
        if let ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(_)) = self.match_type {
        } else {
            self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(Matcher_MatcherList_Predicate_SinglePredicate::new()));
        }
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_single_predicate(&mut self) -> Matcher_MatcherList_Predicate_SinglePredicate {
        if self.has_single_predicate() {
            match self.match_type.take() {
                ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(v)) => v,
                _ => panic!(),
            }
        } else {
            Matcher_MatcherList_Predicate_SinglePredicate::new()
        }
    }

    // .envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList or_matcher = 2;


    pub fn get_or_matcher(&self) -> &Matcher_MatcherList_Predicate_PredicateList {
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(ref v)) => v,
            _ => <Matcher_MatcherList_Predicate_PredicateList as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_or_matcher(&mut self) {
        self.match_type = ::std::option::Option::None;
    }

    pub fn has_or_matcher(&self) -> bool {
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_or_matcher(&mut self, v: Matcher_MatcherList_Predicate_PredicateList) {
        self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(v))
    }

    // Mutable pointer to the field.
    pub fn mut_or_matcher(&mut self) -> &mut Matcher_MatcherList_Predicate_PredicateList {
        if let ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(_)) = self.match_type {
        } else {
            self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(Matcher_MatcherList_Predicate_PredicateList::new()));
        }
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_or_matcher(&mut self) -> Matcher_MatcherList_Predicate_PredicateList {
        if self.has_or_matcher() {
            match self.match_type.take() {
                ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(v)) => v,
                _ => panic!(),
            }
        } else {
            Matcher_MatcherList_Predicate_PredicateList::new()
        }
    }

    // .envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate.PredicateList and_matcher = 3;


    pub fn get_and_matcher(&self) -> &Matcher_MatcherList_Predicate_PredicateList {
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(ref v)) => v,
            _ => <Matcher_MatcherList_Predicate_PredicateList as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_and_matcher(&mut self) {
        self.match_type = ::std::option::Option::None;
    }

    pub fn has_and_matcher(&self) -> bool {
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_and_matcher(&mut self, v: Matcher_MatcherList_Predicate_PredicateList) {
        self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(v))
    }

    // Mutable pointer to the field.
    pub fn mut_and_matcher(&mut self) -> &mut Matcher_MatcherList_Predicate_PredicateList {
        if let ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(_)) = self.match_type {
        } else {
            self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(Matcher_MatcherList_Predicate_PredicateList::new()));
        }
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_and_matcher(&mut self) -> Matcher_MatcherList_Predicate_PredicateList {
        if self.has_and_matcher() {
            match self.match_type.take() {
                ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(v)) => v,
                _ => panic!(),
            }
        } else {
            Matcher_MatcherList_Predicate_PredicateList::new()
        }
    }

    // .envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate not_matcher = 4;


    pub fn get_not_matcher(&self) -> &Matcher_MatcherList_Predicate {
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(ref v)) => v,
            _ => <Matcher_MatcherList_Predicate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_not_matcher(&mut self) {
        self.match_type = ::std::option::Option::None;
    }

    pub fn has_not_matcher(&self) -> bool {
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_matcher(&mut self, v: Matcher_MatcherList_Predicate) {
        self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(::std::boxed::Box::new(v)))
    }

    // Mutable pointer to the field.
    pub fn mut_not_matcher(&mut self) -> &mut Matcher_MatcherList_Predicate {
        if let ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(_)) = self.match_type {
        } else {
            self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(::std::boxed::Box::new(Matcher_MatcherList_Predicate::new())));
        }
        match self.match_type {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_not_matcher(&mut self) -> Matcher_MatcherList_Predicate {
        if self.has_not_matcher() {
            match self.match_type.take() {
                ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(v)) => *v,
                _ => panic!(),
            }
        } else {
            Matcher_MatcherList_Predicate::new()
        }
    }
}

impl ::protobuf::Message for Matcher_MatcherList_Predicate {
    fn is_initialized(&self) -> bool {
        if let Some(Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(ref v)) = self.match_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(ref v)) = self.match_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(ref v)) = self.match_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(ref v)) = self.match_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_type = ::std::option::Option::Some(Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(::std::boxed::Box::new(is.read_message()?)));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.match_type {
            match v {
                &Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.match_type {
            match v {
                &Matcher_MatcherList_Predicate_oneof_match_type::single_predicate(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Matcher_MatcherList_Predicate_oneof_match_type::or_matcher(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Matcher_MatcherList_Predicate_oneof_match_type::and_matcher(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Matcher_MatcherList_Predicate_oneof_match_type::not_matcher(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Matcher_MatcherList_Predicate {
        Matcher_MatcherList_Predicate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Matcher_MatcherList_Predicate_SinglePredicate>(
                "single_predicate",
                Matcher_MatcherList_Predicate::has_single_predicate,
                Matcher_MatcherList_Predicate::get_single_predicate,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Matcher_MatcherList_Predicate_PredicateList>(
                "or_matcher",
                Matcher_MatcherList_Predicate::has_or_matcher,
                Matcher_MatcherList_Predicate::get_or_matcher,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Matcher_MatcherList_Predicate_PredicateList>(
                "and_matcher",
                Matcher_MatcherList_Predicate::has_and_matcher,
                Matcher_MatcherList_Predicate::get_and_matcher,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Matcher_MatcherList_Predicate>(
                "not_matcher",
                Matcher_MatcherList_Predicate::has_not_matcher,
                Matcher_MatcherList_Predicate::get_not_matcher,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Matcher_MatcherList_Predicate>(
                "Matcher.MatcherList.Predicate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Matcher_MatcherList_Predicate {
        static instance: ::protobuf::rt::LazyV2<Matcher_MatcherList_Predicate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Matcher_MatcherList_Predicate::new)
    }
}

impl ::protobuf::Clear for Matcher_MatcherList_Predicate {
    fn clear(&mut self) {
        self.match_type = ::std::option::Option::None;
        self.match_type = ::std::option::Option::None;
        self.match_type = ::std::option::Option::None;
        self.match_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Matcher_MatcherList_Predicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher_MatcherList_Predicate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Matcher_MatcherList_Predicate_SinglePredicate {
    // message fields
    pub input: ::protobuf::SingularPtrField<super::extension::TypedExtensionConfig>,
    // message oneof groups
    pub matcher: ::std::option::Option<Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Matcher_MatcherList_Predicate_SinglePredicate {
    fn default() -> &'a Matcher_MatcherList_Predicate_SinglePredicate {
        <Matcher_MatcherList_Predicate_SinglePredicate as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher {
    value_match(super::string::StringMatcher),
    custom_match(super::extension::TypedExtensionConfig),
}

impl Matcher_MatcherList_Predicate_SinglePredicate {
    pub fn new() -> Matcher_MatcherList_Predicate_SinglePredicate {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.TypedExtensionConfig input = 1;


    pub fn get_input(&self) -> &super::extension::TypedExtensionConfig {
        self.input.as_ref().unwrap_or_else(|| <super::extension::TypedExtensionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_input(&mut self) {
        self.input.clear();
    }

    pub fn has_input(&self) -> bool {
        self.input.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: super::extension::TypedExtensionConfig) {
        self.input = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut super::extension::TypedExtensionConfig {
        if self.input.is_none() {
            self.input.set_default();
        }
        self.input.as_mut().unwrap()
    }

    // Take field
    pub fn take_input(&mut self) -> super::extension::TypedExtensionConfig {
        self.input.take().unwrap_or_else(|| super::extension::TypedExtensionConfig::new())
    }

    // .envoy.type.matcher.v3.StringMatcher value_match = 2;


    pub fn get_value_match(&self) -> &super::string::StringMatcher {
        match self.matcher {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(ref v)) => v,
            _ => <super::string::StringMatcher as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_value_match(&mut self) {
        self.matcher = ::std::option::Option::None;
    }

    pub fn has_value_match(&self) -> bool {
        match self.matcher {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_value_match(&mut self, v: super::string::StringMatcher) {
        self.matcher = ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_value_match(&mut self) -> &mut super::string::StringMatcher {
        if let ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(_)) = self.matcher {
        } else {
            self.matcher = ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(super::string::StringMatcher::new()));
        }
        match self.matcher {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_value_match(&mut self) -> super::string::StringMatcher {
        if self.has_value_match() {
            match self.matcher.take() {
                ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(v)) => v,
                _ => panic!(),
            }
        } else {
            super::string::StringMatcher::new()
        }
    }

    // .envoy.config.core.v3.TypedExtensionConfig custom_match = 3;


    pub fn get_custom_match(&self) -> &super::extension::TypedExtensionConfig {
        match self.matcher {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(ref v)) => v,
            _ => <super::extension::TypedExtensionConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_custom_match(&mut self) {
        self.matcher = ::std::option::Option::None;
    }

    pub fn has_custom_match(&self) -> bool {
        match self.matcher {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom_match(&mut self, v: super::extension::TypedExtensionConfig) {
        self.matcher = ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom_match(&mut self) -> &mut super::extension::TypedExtensionConfig {
        if let ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(_)) = self.matcher {
        } else {
            self.matcher = ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(super::extension::TypedExtensionConfig::new()));
        }
        match self.matcher {
            ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom_match(&mut self) -> super::extension::TypedExtensionConfig {
        if self.has_custom_match() {
            match self.matcher.take() {
                ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(v)) => v,
                _ => panic!(),
            }
        } else {
            super::extension::TypedExtensionConfig::new()
        }
    }
}

impl ::protobuf::Message for Matcher_MatcherList_Predicate_SinglePredicate {
    fn is_initialized(&self) -> bool {
        for v in &self.input {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(ref v)) = self.matcher {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(ref v)) = self.matcher {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.input)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.matcher = ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.matcher = ::std::option::Option::Some(Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.input.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.matcher {
            match v {
                &Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.input.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.matcher {
            match v {
                &Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::value_match(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Matcher_MatcherList_Predicate_SinglePredicate_oneof_matcher::custom_match(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Matcher_MatcherList_Predicate_SinglePredicate {
        Matcher_MatcherList_Predicate_SinglePredicate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::extension::TypedExtensionConfig>>(
                "input",
                |m: &Matcher_MatcherList_Predicate_SinglePredicate| { &m.input },
                |m: &mut Matcher_MatcherList_Predicate_SinglePredicate| { &mut m.input },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::string::StringMatcher>(
                "value_match",
                Matcher_MatcherList_Predicate_SinglePredicate::has_value_match,
                Matcher_MatcherList_Predicate_SinglePredicate::get_value_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::extension::TypedExtensionConfig>(
                "custom_match",
                Matcher_MatcherList_Predicate_SinglePredicate::has_custom_match,
                Matcher_MatcherList_Predicate_SinglePredicate::get_custom_match,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Matcher_MatcherList_Predicate_SinglePredicate>(
                "Matcher.MatcherList.Predicate.SinglePredicate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Matcher_MatcherList_Predicate_SinglePredicate {
        static instance: ::protobuf::rt::LazyV2<Matcher_MatcherList_Predicate_SinglePredicate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Matcher_MatcherList_Predicate_SinglePredicate::new)
    }
}

impl ::protobuf::Clear for Matcher_MatcherList_Predicate_SinglePredicate {
    fn clear(&mut self) {
        self.input.clear();
        self.matcher = ::std::option::Option::None;
        self.matcher = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Matcher_MatcherList_Predicate_SinglePredicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher_MatcherList_Predicate_SinglePredicate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Matcher_MatcherList_Predicate_PredicateList {
    // message fields
    pub predicate: ::protobuf::RepeatedField<Matcher_MatcherList_Predicate>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Matcher_MatcherList_Predicate_PredicateList {
    fn default() -> &'a Matcher_MatcherList_Predicate_PredicateList {
        <Matcher_MatcherList_Predicate_PredicateList as ::protobuf::Message>::default_instance()
    }
}

impl Matcher_MatcherList_Predicate_PredicateList {
    pub fn new() -> Matcher_MatcherList_Predicate_PredicateList {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate predicate = 1;


    pub fn get_predicate(&self) -> &[Matcher_MatcherList_Predicate] {
        &self.predicate
    }
    pub fn clear_predicate(&mut self) {
        self.predicate.clear();
    }

    // Param is passed by value, moved
    pub fn set_predicate(&mut self, v: ::protobuf::RepeatedField<Matcher_MatcherList_Predicate>) {
        self.predicate = v;
    }

    // Mutable pointer to the field.
    pub fn mut_predicate(&mut self) -> &mut ::protobuf::RepeatedField<Matcher_MatcherList_Predicate> {
        &mut self.predicate
    }

    // Take field
    pub fn take_predicate(&mut self) -> ::protobuf::RepeatedField<Matcher_MatcherList_Predicate> {
        ::std::mem::replace(&mut self.predicate, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Matcher_MatcherList_Predicate_PredicateList {
    fn is_initialized(&self) -> bool {
        for v in &self.predicate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.predicate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.predicate {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.predicate {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Matcher_MatcherList_Predicate_PredicateList {
        Matcher_MatcherList_Predicate_PredicateList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Matcher_MatcherList_Predicate>>(
                "predicate",
                |m: &Matcher_MatcherList_Predicate_PredicateList| { &m.predicate },
                |m: &mut Matcher_MatcherList_Predicate_PredicateList| { &mut m.predicate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Matcher_MatcherList_Predicate_PredicateList>(
                "Matcher.MatcherList.Predicate.PredicateList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Matcher_MatcherList_Predicate_PredicateList {
        static instance: ::protobuf::rt::LazyV2<Matcher_MatcherList_Predicate_PredicateList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Matcher_MatcherList_Predicate_PredicateList::new)
    }
}

impl ::protobuf::Clear for Matcher_MatcherList_Predicate_PredicateList {
    fn clear(&mut self) {
        self.predicate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Matcher_MatcherList_Predicate_PredicateList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher_MatcherList_Predicate_PredicateList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Matcher_MatcherList_FieldMatcher {
    // message fields
    pub predicate: ::protobuf::SingularPtrField<Matcher_MatcherList_Predicate>,
    pub on_match: ::protobuf::SingularPtrField<Matcher_OnMatch>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Matcher_MatcherList_FieldMatcher {
    fn default() -> &'a Matcher_MatcherList_FieldMatcher {
        <Matcher_MatcherList_FieldMatcher as ::protobuf::Message>::default_instance()
    }
}

impl Matcher_MatcherList_FieldMatcher {
    pub fn new() -> Matcher_MatcherList_FieldMatcher {
        ::std::default::Default::default()
    }

    // .envoy.config.common.matcher.v3.Matcher.MatcherList.Predicate predicate = 1;


    pub fn get_predicate(&self) -> &Matcher_MatcherList_Predicate {
        self.predicate.as_ref().unwrap_or_else(|| <Matcher_MatcherList_Predicate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_predicate(&mut self) {
        self.predicate.clear();
    }

    pub fn has_predicate(&self) -> bool {
        self.predicate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_predicate(&mut self, v: Matcher_MatcherList_Predicate) {
        self.predicate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_predicate(&mut self) -> &mut Matcher_MatcherList_Predicate {
        if self.predicate.is_none() {
            self.predicate.set_default();
        }
        self.predicate.as_mut().unwrap()
    }

    // Take field
    pub fn take_predicate(&mut self) -> Matcher_MatcherList_Predicate {
        self.predicate.take().unwrap_or_else(|| Matcher_MatcherList_Predicate::new())
    }

    // .envoy.config.common.matcher.v3.Matcher.OnMatch on_match = 2;


    pub fn get_on_match(&self) -> &Matcher_OnMatch {
        self.on_match.as_ref().unwrap_or_else(|| <Matcher_OnMatch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_on_match(&mut self) {
        self.on_match.clear();
    }

    pub fn has_on_match(&self) -> bool {
        self.on_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_on_match(&mut self, v: Matcher_OnMatch) {
        self.on_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_on_match(&mut self) -> &mut Matcher_OnMatch {
        if self.on_match.is_none() {
            self.on_match.set_default();
        }
        self.on_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_on_match(&mut self) -> Matcher_OnMatch {
        self.on_match.take().unwrap_or_else(|| Matcher_OnMatch::new())
    }
}

impl ::protobuf::Message for Matcher_MatcherList_FieldMatcher {
    fn is_initialized(&self) -> bool {
        for v in &self.predicate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.on_match {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.predicate)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.on_match)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.predicate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.on_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.predicate.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.on_match.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Matcher_MatcherList_FieldMatcher {
        Matcher_MatcherList_FieldMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Matcher_MatcherList_Predicate>>(
                "predicate",
                |m: &Matcher_MatcherList_FieldMatcher| { &m.predicate },
                |m: &mut Matcher_MatcherList_FieldMatcher| { &mut m.predicate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Matcher_OnMatch>>(
                "on_match",
                |m: &Matcher_MatcherList_FieldMatcher| { &m.on_match },
                |m: &mut Matcher_MatcherList_FieldMatcher| { &mut m.on_match },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Matcher_MatcherList_FieldMatcher>(
                "Matcher.MatcherList.FieldMatcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Matcher_MatcherList_FieldMatcher {
        static instance: ::protobuf::rt::LazyV2<Matcher_MatcherList_FieldMatcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Matcher_MatcherList_FieldMatcher::new)
    }
}

impl ::protobuf::Clear for Matcher_MatcherList_FieldMatcher {
    fn clear(&mut self) {
        self.predicate.clear();
        self.on_match.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Matcher_MatcherList_FieldMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher_MatcherList_FieldMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Matcher_MatcherTree {
    // message fields
    pub input: ::protobuf::SingularPtrField<super::extension::TypedExtensionConfig>,
    // message oneof groups
    pub tree_type: ::std::option::Option<Matcher_MatcherTree_oneof_tree_type>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Matcher_MatcherTree {
    fn default() -> &'a Matcher_MatcherTree {
        <Matcher_MatcherTree as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum Matcher_MatcherTree_oneof_tree_type {
    exact_match_map(Matcher_MatcherTree_MatchMap),
    prefix_match_map(Matcher_MatcherTree_MatchMap),
    custom_match(super::extension::TypedExtensionConfig),
}

impl Matcher_MatcherTree {
    pub fn new() -> Matcher_MatcherTree {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.TypedExtensionConfig input = 1;


    pub fn get_input(&self) -> &super::extension::TypedExtensionConfig {
        self.input.as_ref().unwrap_or_else(|| <super::extension::TypedExtensionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_input(&mut self) {
        self.input.clear();
    }

    pub fn has_input(&self) -> bool {
        self.input.is_some()
    }

    // Param is passed by value, moved
    pub fn set_input(&mut self, v: super::extension::TypedExtensionConfig) {
        self.input = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_input(&mut self) -> &mut super::extension::TypedExtensionConfig {
        if self.input.is_none() {
            self.input.set_default();
        }
        self.input.as_mut().unwrap()
    }

    // Take field
    pub fn take_input(&mut self) -> super::extension::TypedExtensionConfig {
        self.input.take().unwrap_or_else(|| super::extension::TypedExtensionConfig::new())
    }

    // .envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap exact_match_map = 2;


    pub fn get_exact_match_map(&self) -> &Matcher_MatcherTree_MatchMap {
        match self.tree_type {
            ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::exact_match_map(ref v)) => v,
            _ => <Matcher_MatcherTree_MatchMap as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_exact_match_map(&mut self) {
        self.tree_type = ::std::option::Option::None;
    }

    pub fn has_exact_match_map(&self) -> bool {
        match self.tree_type {
            ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::exact_match_map(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exact_match_map(&mut self, v: Matcher_MatcherTree_MatchMap) {
        self.tree_type = ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::exact_match_map(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exact_match_map(&mut self) -> &mut Matcher_MatcherTree_MatchMap {
        if let ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::exact_match_map(_)) = self.tree_type {
        } else {
            self.tree_type = ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::exact_match_map(Matcher_MatcherTree_MatchMap::new()));
        }
        match self.tree_type {
            ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::exact_match_map(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exact_match_map(&mut self) -> Matcher_MatcherTree_MatchMap {
        if self.has_exact_match_map() {
            match self.tree_type.take() {
                ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::exact_match_map(v)) => v,
                _ => panic!(),
            }
        } else {
            Matcher_MatcherTree_MatchMap::new()
        }
    }

    // .envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap prefix_match_map = 3;


    pub fn get_prefix_match_map(&self) -> &Matcher_MatcherTree_MatchMap {
        match self.tree_type {
            ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::prefix_match_map(ref v)) => v,
            _ => <Matcher_MatcherTree_MatchMap as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_prefix_match_map(&mut self) {
        self.tree_type = ::std::option::Option::None;
    }

    pub fn has_prefix_match_map(&self) -> bool {
        match self.tree_type {
            ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::prefix_match_map(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prefix_match_map(&mut self, v: Matcher_MatcherTree_MatchMap) {
        self.tree_type = ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::prefix_match_map(v))
    }

    // Mutable pointer to the field.
    pub fn mut_prefix_match_map(&mut self) -> &mut Matcher_MatcherTree_MatchMap {
        if let ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::prefix_match_map(_)) = self.tree_type {
        } else {
            self.tree_type = ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::prefix_match_map(Matcher_MatcherTree_MatchMap::new()));
        }
        match self.tree_type {
            ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::prefix_match_map(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_prefix_match_map(&mut self) -> Matcher_MatcherTree_MatchMap {
        if self.has_prefix_match_map() {
            match self.tree_type.take() {
                ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::prefix_match_map(v)) => v,
                _ => panic!(),
            }
        } else {
            Matcher_MatcherTree_MatchMap::new()
        }
    }

    // .envoy.config.core.v3.TypedExtensionConfig custom_match = 4;


    pub fn get_custom_match(&self) -> &super::extension::TypedExtensionConfig {
        match self.tree_type {
            ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::custom_match(ref v)) => v,
            _ => <super::extension::TypedExtensionConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_custom_match(&mut self) {
        self.tree_type = ::std::option::Option::None;
    }

    pub fn has_custom_match(&self) -> bool {
        match self.tree_type {
            ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::custom_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_custom_match(&mut self, v: super::extension::TypedExtensionConfig) {
        self.tree_type = ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::custom_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_custom_match(&mut self) -> &mut super::extension::TypedExtensionConfig {
        if let ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::custom_match(_)) = self.tree_type {
        } else {
            self.tree_type = ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::custom_match(super::extension::TypedExtensionConfig::new()));
        }
        match self.tree_type {
            ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::custom_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_custom_match(&mut self) -> super::extension::TypedExtensionConfig {
        if self.has_custom_match() {
            match self.tree_type.take() {
                ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::custom_match(v)) => v,
                _ => panic!(),
            }
        } else {
            super::extension::TypedExtensionConfig::new()
        }
    }
}

impl ::protobuf::Message for Matcher_MatcherTree {
    fn is_initialized(&self) -> bool {
        for v in &self.input {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Matcher_MatcherTree_oneof_tree_type::exact_match_map(ref v)) = self.tree_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Matcher_MatcherTree_oneof_tree_type::prefix_match_map(ref v)) = self.tree_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Matcher_MatcherTree_oneof_tree_type::custom_match(ref v)) = self.tree_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.input)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tree_type = ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::exact_match_map(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tree_type = ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::prefix_match_map(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tree_type = ::std::option::Option::Some(Matcher_MatcherTree_oneof_tree_type::custom_match(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.input.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.tree_type {
            match v {
                &Matcher_MatcherTree_oneof_tree_type::exact_match_map(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Matcher_MatcherTree_oneof_tree_type::prefix_match_map(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Matcher_MatcherTree_oneof_tree_type::custom_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.input.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.tree_type {
            match v {
                &Matcher_MatcherTree_oneof_tree_type::exact_match_map(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Matcher_MatcherTree_oneof_tree_type::prefix_match_map(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Matcher_MatcherTree_oneof_tree_type::custom_match(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Matcher_MatcherTree {
        Matcher_MatcherTree::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::extension::TypedExtensionConfig>>(
                "input",
                |m: &Matcher_MatcherTree| { &m.input },
                |m: &mut Matcher_MatcherTree| { &mut m.input },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Matcher_MatcherTree_MatchMap>(
                "exact_match_map",
                Matcher_MatcherTree::has_exact_match_map,
                Matcher_MatcherTree::get_exact_match_map,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Matcher_MatcherTree_MatchMap>(
                "prefix_match_map",
                Matcher_MatcherTree::has_prefix_match_map,
                Matcher_MatcherTree::get_prefix_match_map,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::extension::TypedExtensionConfig>(
                "custom_match",
                Matcher_MatcherTree::has_custom_match,
                Matcher_MatcherTree::get_custom_match,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Matcher_MatcherTree>(
                "Matcher.MatcherTree",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Matcher_MatcherTree {
        static instance: ::protobuf::rt::LazyV2<Matcher_MatcherTree> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Matcher_MatcherTree::new)
    }
}

impl ::protobuf::Clear for Matcher_MatcherTree {
    fn clear(&mut self) {
        self.input.clear();
        self.tree_type = ::std::option::Option::None;
        self.tree_type = ::std::option::Option::None;
        self.tree_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Matcher_MatcherTree {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher_MatcherTree {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct Matcher_MatcherTree_MatchMap {
    // message fields
    pub map: ::std::collections::HashMap<::std::string::String, Matcher_OnMatch>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Matcher_MatcherTree_MatchMap {
    fn default() -> &'a Matcher_MatcherTree_MatchMap {
        <Matcher_MatcherTree_MatchMap as ::protobuf::Message>::default_instance()
    }
}

impl Matcher_MatcherTree_MatchMap {
    pub fn new() -> Matcher_MatcherTree_MatchMap {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMap.MapEntry map = 1;


    pub fn get_map(&self) -> &::std::collections::HashMap<::std::string::String, Matcher_OnMatch> {
        &self.map
    }
    pub fn clear_map(&mut self) {
        self.map.clear();
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: ::std::collections::HashMap<::std::string::String, Matcher_OnMatch>) {
        self.map = v;
    }

    // Mutable pointer to the field.
    pub fn mut_map(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Matcher_OnMatch> {
        &mut self.map
    }

    // Take field
    pub fn take_map(&mut self) -> ::std::collections::HashMap<::std::string::String, Matcher_OnMatch> {
        ::std::mem::replace(&mut self.map, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Matcher_MatcherTree_MatchMap {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Matcher_OnMatch>>(wire_type, is, &mut self.map)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Matcher_OnMatch>>(1, &self.map);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Matcher_OnMatch>>(1, &self.map, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Matcher_MatcherTree_MatchMap {
        Matcher_MatcherTree_MatchMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Matcher_OnMatch>>(
                "map",
                |m: &Matcher_MatcherTree_MatchMap| { &m.map },
                |m: &mut Matcher_MatcherTree_MatchMap| { &mut m.map },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Matcher_MatcherTree_MatchMap>(
                "Matcher.MatcherTree.MatchMap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Matcher_MatcherTree_MatchMap {
        static instance: ::protobuf::rt::LazyV2<Matcher_MatcherTree_MatchMap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Matcher_MatcherTree_MatchMap::new)
    }
}

impl ::protobuf::Clear for Matcher_MatcherTree_MatchMap {
    fn clear(&mut self) {
        self.map.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Matcher_MatcherTree_MatchMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Matcher_MatcherTree_MatchMap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct MatchPredicate {
    // message oneof groups
    pub rule: ::std::option::Option<MatchPredicate_oneof_rule>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MatchPredicate {
    fn default() -> &'a MatchPredicate {
        <MatchPredicate as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum MatchPredicate_oneof_rule {
    or_match(MatchPredicate_MatchSet),
    and_match(MatchPredicate_MatchSet),
    not_match(::std::boxed::Box<MatchPredicate>),
    any_match(bool),
    http_request_headers_match(HttpHeadersMatch),
    http_request_trailers_match(HttpHeadersMatch),
    http_response_headers_match(HttpHeadersMatch),
    http_response_trailers_match(HttpHeadersMatch),
    http_request_generic_body_match(HttpGenericBodyMatch),
    http_response_generic_body_match(HttpGenericBodyMatch),
}

impl MatchPredicate {
    pub fn new() -> MatchPredicate {
        ::std::default::Default::default()
    }

    // .envoy.config.common.matcher.v3.MatchPredicate.MatchSet or_match = 1;


    pub fn get_or_match(&self) -> &MatchPredicate_MatchSet {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(ref v)) => v,
            _ => <MatchPredicate_MatchSet as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_or_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_or_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_or_match(&mut self, v: MatchPredicate_MatchSet) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_or_match(&mut self) -> &mut MatchPredicate_MatchSet {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(MatchPredicate_MatchSet::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_or_match(&mut self) -> MatchPredicate_MatchSet {
        if self.has_or_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(v)) => v,
                _ => panic!(),
            }
        } else {
            MatchPredicate_MatchSet::new()
        }
    }

    // .envoy.config.common.matcher.v3.MatchPredicate.MatchSet and_match = 2;


    pub fn get_and_match(&self) -> &MatchPredicate_MatchSet {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(ref v)) => v,
            _ => <MatchPredicate_MatchSet as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_and_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_and_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_and_match(&mut self, v: MatchPredicate_MatchSet) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_and_match(&mut self) -> &mut MatchPredicate_MatchSet {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(MatchPredicate_MatchSet::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_and_match(&mut self) -> MatchPredicate_MatchSet {
        if self.has_and_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(v)) => v,
                _ => panic!(),
            }
        } else {
            MatchPredicate_MatchSet::new()
        }
    }

    // .envoy.config.common.matcher.v3.MatchPredicate not_match = 3;


    pub fn get_not_match(&self) -> &MatchPredicate {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(ref v)) => v,
            _ => <MatchPredicate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_not_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_not_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_match(&mut self, v: MatchPredicate) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(::std::boxed::Box::new(v)))
    }

    // Mutable pointer to the field.
    pub fn mut_not_match(&mut self) -> &mut MatchPredicate {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(::std::boxed::Box::new(MatchPredicate::new())));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_not_match(&mut self) -> MatchPredicate {
        if self.has_not_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(v)) => *v,
                _ => panic!(),
            }
        } else {
            MatchPredicate::new()
        }
    }

    // bool any_match = 4;


    pub fn get_any_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::any_match(v)) => v,
            _ => false,
        }
    }
    pub fn clear_any_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_any_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::any_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_any_match(&mut self, v: bool) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::any_match(v))
    }

    // .envoy.config.common.matcher.v3.HttpHeadersMatch http_request_headers_match = 5;


    pub fn get_http_request_headers_match(&self) -> &HttpHeadersMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(ref v)) => v,
            _ => <HttpHeadersMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_request_headers_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_request_headers_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_request_headers_match(&mut self, v: HttpHeadersMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_request_headers_match(&mut self) -> &mut HttpHeadersMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(HttpHeadersMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_request_headers_match(&mut self) -> HttpHeadersMatch {
        if self.has_http_request_headers_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpHeadersMatch::new()
        }
    }

    // .envoy.config.common.matcher.v3.HttpHeadersMatch http_request_trailers_match = 6;


    pub fn get_http_request_trailers_match(&self) -> &HttpHeadersMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(ref v)) => v,
            _ => <HttpHeadersMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_request_trailers_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_request_trailers_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_request_trailers_match(&mut self, v: HttpHeadersMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_request_trailers_match(&mut self) -> &mut HttpHeadersMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(HttpHeadersMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_request_trailers_match(&mut self) -> HttpHeadersMatch {
        if self.has_http_request_trailers_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpHeadersMatch::new()
        }
    }

    // .envoy.config.common.matcher.v3.HttpHeadersMatch http_response_headers_match = 7;


    pub fn get_http_response_headers_match(&self) -> &HttpHeadersMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(ref v)) => v,
            _ => <HttpHeadersMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_response_headers_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_response_headers_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_response_headers_match(&mut self, v: HttpHeadersMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_response_headers_match(&mut self) -> &mut HttpHeadersMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(HttpHeadersMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_response_headers_match(&mut self) -> HttpHeadersMatch {
        if self.has_http_response_headers_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpHeadersMatch::new()
        }
    }

    // .envoy.config.common.matcher.v3.HttpHeadersMatch http_response_trailers_match = 8;


    pub fn get_http_response_trailers_match(&self) -> &HttpHeadersMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(ref v)) => v,
            _ => <HttpHeadersMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_response_trailers_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_response_trailers_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_response_trailers_match(&mut self, v: HttpHeadersMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_response_trailers_match(&mut self) -> &mut HttpHeadersMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(HttpHeadersMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_response_trailers_match(&mut self) -> HttpHeadersMatch {
        if self.has_http_response_trailers_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpHeadersMatch::new()
        }
    }

    // .envoy.config.common.matcher.v3.HttpGenericBodyMatch http_request_generic_body_match = 9;


    pub fn get_http_request_generic_body_match(&self) -> &HttpGenericBodyMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(ref v)) => v,
            _ => <HttpGenericBodyMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_request_generic_body_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_request_generic_body_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_request_generic_body_match(&mut self, v: HttpGenericBodyMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_request_generic_body_match(&mut self) -> &mut HttpGenericBodyMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(HttpGenericBodyMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_request_generic_body_match(&mut self) -> HttpGenericBodyMatch {
        if self.has_http_request_generic_body_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpGenericBodyMatch::new()
        }
    }

    // .envoy.config.common.matcher.v3.HttpGenericBodyMatch http_response_generic_body_match = 10;


    pub fn get_http_response_generic_body_match(&self) -> &HttpGenericBodyMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(ref v)) => v,
            _ => <HttpGenericBodyMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_response_generic_body_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_response_generic_body_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_response_generic_body_match(&mut self, v: HttpGenericBodyMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_response_generic_body_match(&mut self) -> &mut HttpGenericBodyMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(HttpGenericBodyMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_response_generic_body_match(&mut self) -> HttpGenericBodyMatch {
        if self.has_http_response_generic_body_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpGenericBodyMatch::new()
        }
    }
}

impl ::protobuf::Message for MatchPredicate {
    fn is_initialized(&self) -> bool {
        if let Some(MatchPredicate_oneof_rule::or_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::and_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::not_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_request_headers_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_request_trailers_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_response_headers_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_response_trailers_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_request_generic_body_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_response_generic_body_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(::std::boxed::Box::new(is.read_message()?)));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::any_match(is.read_bool()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &MatchPredicate_oneof_rule::or_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::and_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::not_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::any_match(v) => {
                    my_size += 2;
                },
                &MatchPredicate_oneof_rule::http_request_headers_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_request_trailers_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_response_headers_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_response_trailers_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_request_generic_body_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_response_generic_body_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &MatchPredicate_oneof_rule::or_match(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::and_match(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::not_match(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::any_match(v) => {
                    os.write_bool(4, v)?;
                },
                &MatchPredicate_oneof_rule::http_request_headers_match(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_request_trailers_match(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_response_headers_match(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_response_trailers_match(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_request_generic_body_match(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_response_generic_body_match(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MatchPredicate {
        MatchPredicate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MatchPredicate_MatchSet>(
                "or_match",
                MatchPredicate::has_or_match,
                MatchPredicate::get_or_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MatchPredicate_MatchSet>(
                "and_match",
                MatchPredicate::has_and_match,
                MatchPredicate::get_and_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MatchPredicate>(
                "not_match",
                MatchPredicate::has_not_match,
                MatchPredicate::get_not_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "any_match",
                MatchPredicate::has_any_match,
                MatchPredicate::get_any_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpHeadersMatch>(
                "http_request_headers_match",
                MatchPredicate::has_http_request_headers_match,
                MatchPredicate::get_http_request_headers_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpHeadersMatch>(
                "http_request_trailers_match",
                MatchPredicate::has_http_request_trailers_match,
                MatchPredicate::get_http_request_trailers_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpHeadersMatch>(
                "http_response_headers_match",
                MatchPredicate::has_http_response_headers_match,
                MatchPredicate::get_http_response_headers_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpHeadersMatch>(
                "http_response_trailers_match",
                MatchPredicate::has_http_response_trailers_match,
                MatchPredicate::get_http_response_trailers_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpGenericBodyMatch>(
                "http_request_generic_body_match",
                MatchPredicate::has_http_request_generic_body_match,
                MatchPredicate::get_http_request_generic_body_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpGenericBodyMatch>(
                "http_response_generic_body_match",
                MatchPredicate::has_http_response_generic_body_match,
                MatchPredicate::get_http_response_generic_body_match,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MatchPredicate>(
                "MatchPredicate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MatchPredicate {
        static instance: ::protobuf::rt::LazyV2<MatchPredicate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MatchPredicate::new)
    }
}

impl ::protobuf::Clear for MatchPredicate {
    fn clear(&mut self) {
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MatchPredicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatchPredicate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct MatchPredicate_MatchSet {
    // message fields
    pub rules: ::protobuf::RepeatedField<MatchPredicate>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MatchPredicate_MatchSet {
    fn default() -> &'a MatchPredicate_MatchSet {
        <MatchPredicate_MatchSet as ::protobuf::Message>::default_instance()
    }
}

impl MatchPredicate_MatchSet {
    pub fn new() -> MatchPredicate_MatchSet {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.common.matcher.v3.MatchPredicate rules = 1;


    pub fn get_rules(&self) -> &[MatchPredicate] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<MatchPredicate>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<MatchPredicate> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<MatchPredicate> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MatchPredicate_MatchSet {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MatchPredicate_MatchSet {
        MatchPredicate_MatchSet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MatchPredicate>>(
                "rules",
                |m: &MatchPredicate_MatchSet| { &m.rules },
                |m: &mut MatchPredicate_MatchSet| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MatchPredicate_MatchSet>(
                "MatchPredicate.MatchSet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MatchPredicate_MatchSet {
        static instance: ::protobuf::rt::LazyV2<MatchPredicate_MatchSet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MatchPredicate_MatchSet::new)
    }
}

impl ::protobuf::Clear for MatchPredicate_MatchSet {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MatchPredicate_MatchSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatchPredicate_MatchSet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct HttpHeadersMatch {
    // message fields
    pub headers: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpHeadersMatch {
    fn default() -> &'a HttpHeadersMatch {
        <HttpHeadersMatch as ::protobuf::Message>::default_instance()
    }
}

impl HttpHeadersMatch {
    pub fn new() -> HttpHeadersMatch {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.route.v3.HeaderMatcher headers = 1;


    pub fn get_headers(&self) -> &[super::route_components::HeaderMatcher] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HttpHeadersMatch {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.headers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpHeadersMatch {
        HttpHeadersMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::HeaderMatcher>>(
                "headers",
                |m: &HttpHeadersMatch| { &m.headers },
                |m: &mut HttpHeadersMatch| { &mut m.headers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpHeadersMatch>(
                "HttpHeadersMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpHeadersMatch {
        static instance: ::protobuf::rt::LazyV2<HttpHeadersMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpHeadersMatch::new)
    }
}

impl ::protobuf::Clear for HttpHeadersMatch {
    fn clear(&mut self) {
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpHeadersMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpHeadersMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct HttpGenericBodyMatch {
    // message fields
    pub bytes_limit: u32,
    pub patterns: ::protobuf::RepeatedField<HttpGenericBodyMatch_GenericTextMatch>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpGenericBodyMatch {
    fn default() -> &'a HttpGenericBodyMatch {
        <HttpGenericBodyMatch as ::protobuf::Message>::default_instance()
    }
}

impl HttpGenericBodyMatch {
    pub fn new() -> HttpGenericBodyMatch {
        ::std::default::Default::default()
    }

    // uint32 bytes_limit = 1;


    pub fn get_bytes_limit(&self) -> u32 {
        self.bytes_limit
    }
    pub fn clear_bytes_limit(&mut self) {
        self.bytes_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_bytes_limit(&mut self, v: u32) {
        self.bytes_limit = v;
    }

    // repeated .envoy.config.common.matcher.v3.HttpGenericBodyMatch.GenericTextMatch patterns = 2;


    pub fn get_patterns(&self) -> &[HttpGenericBodyMatch_GenericTextMatch] {
        &self.patterns
    }
    pub fn clear_patterns(&mut self) {
        self.patterns.clear();
    }

    // Param is passed by value, moved
    pub fn set_patterns(&mut self, v: ::protobuf::RepeatedField<HttpGenericBodyMatch_GenericTextMatch>) {
        self.patterns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_patterns(&mut self) -> &mut ::protobuf::RepeatedField<HttpGenericBodyMatch_GenericTextMatch> {
        &mut self.patterns
    }

    // Take field
    pub fn take_patterns(&mut self) -> ::protobuf::RepeatedField<HttpGenericBodyMatch_GenericTextMatch> {
        ::std::mem::replace(&mut self.patterns, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HttpGenericBodyMatch {
    fn is_initialized(&self) -> bool {
        for v in &self.patterns {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.bytes_limit = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.patterns)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.bytes_limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.bytes_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.patterns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.bytes_limit != 0 {
            os.write_uint32(1, self.bytes_limit)?;
        }
        for v in &self.patterns {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpGenericBodyMatch {
        HttpGenericBodyMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "bytes_limit",
                |m: &HttpGenericBodyMatch| { &m.bytes_limit },
                |m: &mut HttpGenericBodyMatch| { &mut m.bytes_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpGenericBodyMatch_GenericTextMatch>>(
                "patterns",
                |m: &HttpGenericBodyMatch| { &m.patterns },
                |m: &mut HttpGenericBodyMatch| { &mut m.patterns },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpGenericBodyMatch>(
                "HttpGenericBodyMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpGenericBodyMatch {
        static instance: ::protobuf::rt::LazyV2<HttpGenericBodyMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpGenericBodyMatch::new)
    }
}

impl ::protobuf::Clear for HttpGenericBodyMatch {
    fn clear(&mut self) {
        self.bytes_limit = 0;
        self.patterns.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpGenericBodyMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpGenericBodyMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct HttpGenericBodyMatch_GenericTextMatch {
    // message oneof groups
    pub rule: ::std::option::Option<HttpGenericBodyMatch_GenericTextMatch_oneof_rule>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpGenericBodyMatch_GenericTextMatch {
    fn default() -> &'a HttpGenericBodyMatch_GenericTextMatch {
        <HttpGenericBodyMatch_GenericTextMatch as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum HttpGenericBodyMatch_GenericTextMatch_oneof_rule {
    string_match(::std::string::String),
    binary_match(::std::vec::Vec<u8>),
}

impl HttpGenericBodyMatch_GenericTextMatch {
    pub fn new() -> HttpGenericBodyMatch_GenericTextMatch {
        ::std::default::Default::default()
    }

    // string string_match = 1;


    pub fn get_string_match(&self) -> &str {
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_string_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_string_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_match(&mut self, v: ::std::string::String) {
        self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_match(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(::std::string::String::new()));
        }
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_match(&mut self) -> ::std::string::String {
        if self.has_string_match() {
            match self.rule.take() {
                ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes binary_match = 2;


    pub fn get_binary_match(&self) -> &[u8] {
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_binary_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_binary_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_binary_match(&mut self, v: ::std::vec::Vec<u8>) {
        self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_binary_match(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(::std::vec::Vec::new()));
        }
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_binary_match(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_binary_match() {
            match self.rule.take() {
                ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for HttpGenericBodyMatch_GenericTextMatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(ref v) => {
                    os.write_string(1, v)?;
                },
                &HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(ref v) => {
                    os.write_bytes(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpGenericBodyMatch_GenericTextMatch {
        HttpGenericBodyMatch_GenericTextMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "string_match",
                HttpGenericBodyMatch_GenericTextMatch::has_string_match,
                HttpGenericBodyMatch_GenericTextMatch::get_string_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "binary_match",
                HttpGenericBodyMatch_GenericTextMatch::has_binary_match,
                HttpGenericBodyMatch_GenericTextMatch::get_binary_match,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpGenericBodyMatch_GenericTextMatch>(
                "HttpGenericBodyMatch.GenericTextMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpGenericBodyMatch_GenericTextMatch {
        static instance: ::protobuf::rt::LazyV2<HttpGenericBodyMatch_GenericTextMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpGenericBodyMatch_GenericTextMatch::new)
    }
}

impl ::protobuf::Clear for HttpGenericBodyMatch_GenericTextMatch {
    fn clear(&mut self) {
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpGenericBodyMatch_GenericTextMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpGenericBodyMatch_GenericTextMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n,envoy/config/common/matcher/v3/matcher.proto\x12\x1eenvoy.config.comm\
    on.matcher.v3\x1a$envoy/config/core/v3/extension.proto\x1a,envoy/config/\
    route/v3/route_components.proto\x1a\"envoy/type/matcher/v3/string.proto\
    \x1a\x1fxds/annotations/v3/status.proto\x1a\x1dudpa/annotations/status.p\
    roto\x1a\x17validate/validate.proto\"\xe4\x11\n\x07Matcher\x12X\n\x0cmat\
    cher_list\x18\x01\x20\x01(\x0b23.envoy.config.common.matcher.v3.Matcher.\
    MatcherListH\0R\x0bmatcherList\x12X\n\x0cmatcher_tree\x18\x02\x20\x01(\
    \x0b23.envoy.config.common.matcher.v3.Matcher.MatcherTreeH\0R\x0bmatcher\
    Tree\x12O\n\x0bon_no_match\x18\x03\x20\x01(\x0b2/.envoy.config.common.ma\
    tcher.v3.Matcher.OnMatchR\tonNoMatch\x1a\xa5\x01\n\x07OnMatch\x12C\n\x07\
    matcher\x18\x01\x20\x01(\x0b2'.envoy.config.common.matcher.v3.MatcherH\0\
    R\x07matcher\x12D\n\x06action\x18\x02\x20\x01(\x0b2*.envoy.config.core.v\
    3.TypedExtensionConfigH\0R\x06actionB\x0f\n\x08on_match\x12\x03\xf8B\x01\
    \x1a\xa2\t\n\x0bMatcherList\x12f\n\x08matchers\x18\x01\x20\x03(\x0b2@.en\
    voy.config.common.matcher.v3.Matcher.MatcherList.FieldMatcherR\x08matche\
    rsB\x08\xfaB\x05\x92\x01\x02\x08\x01\x1a\xdc\x06\n\tPredicate\x12z\n\x10\
    single_predicate\x18\x01\x20\x01(\x0b2M.envoy.config.common.matcher.v3.M\
    atcher.MatcherList.Predicate.SinglePredicateH\0R\x0fsinglePredicate\x12l\
    \n\nor_matcher\x18\x02\x20\x01(\x0b2K.envoy.config.common.matcher.v3.Mat\
    cher.MatcherList.Predicate.PredicateListH\0R\torMatcher\x12n\n\x0band_ma\
    tcher\x18\x03\x20\x01(\x0b2K.envoy.config.common.matcher.v3.Matcher.Matc\
    herList.Predicate.PredicateListH\0R\nandMatcher\x12`\n\x0bnot_matcher\
    \x18\x04\x20\x01(\x0b2=.envoy.config.common.matcher.v3.Matcher.MatcherLi\
    st.PredicateH\0R\nnotMatcher\x1a\x87\x02\n\x0fSinglePredicate\x12J\n\x05\
    input\x18\x01\x20\x01(\x0b2*.envoy.config.core.v3.TypedExtensionConfigR\
    \x05inputB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12G\n\x0bvalue_match\x18\
    \x02\x20\x01(\x0b2$.envoy.type.matcher.v3.StringMatcherH\0R\nvalueMatch\
    \x12O\n\x0ccustom_match\x18\x03\x20\x01(\x0b2*.envoy.config.core.v3.Type\
    dExtensionConfigH\0R\x0bcustomMatchB\x0e\n\x07matcher\x12\x03\xf8B\x01\
    \x1av\n\rPredicateList\x12e\n\tpredicate\x18\x01\x20\x03(\x0b2=.envoy.co\
    nfig.common.matcher.v3.Matcher.MatcherList.PredicateR\tpredicateB\x08\
    \xfaB\x05\x92\x01\x02\x08\x02B\x11\n\nmatch_type\x12\x03\xf8B\x01\x1a\
    \xcb\x01\n\x0cFieldMatcher\x12e\n\tpredicate\x18\x01\x20\x01(\x0b2=.envo\
    y.config.common.matcher.v3.Matcher.MatcherList.PredicateR\tpredicateB\
    \x08\xfaB\x05\x8a\x01\x02\x10\x01\x12T\n\x08on_match\x18\x02\x20\x01(\
    \x0b2/.envoy.config.common.matcher.v3.Matcher.OnMatchR\x07onMatchB\x08\
    \xfaB\x05\x8a\x01\x02\x10\x01\x1a\xe7\x04\n\x0bMatcherTree\x12J\n\x05inp\
    ut\x18\x01\x20\x01(\x0b2*.envoy.config.core.v3.TypedExtensionConfigR\x05\
    inputB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12f\n\x0fexact_match_map\x18\
    \x02\x20\x01(\x0b2<.envoy.config.common.matcher.v3.Matcher.MatcherTree.M\
    atchMapH\0R\rexactMatchMap\x12h\n\x10prefix_match_map\x18\x03\x20\x01(\
    \x0b2<.envoy.config.common.matcher.v3.Matcher.MatcherTree.MatchMapH\0R\
    \x0eprefixMatchMap\x12O\n\x0ccustom_match\x18\x04\x20\x01(\x0b2*.envoy.c\
    onfig.core.v3.TypedExtensionConfigH\0R\x0bcustomMatch\x1a\xd6\x01\n\x08M\
    atchMap\x12a\n\x03map\x18\x01\x20\x03(\x0b2E.envoy.config.common.matcher\
    .v3.Matcher.MatcherTree.MatchMap.MapEntryR\x03mapB\x08\xfaB\x05\x9a\x01\
    \x02\x08\x01\x1ag\n\x08MapEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03\
    key\x12E\n\x05value\x18\x02\x20\x01(\x0b2/.envoy.config.common.matcher.v\
    3.Matcher.OnMatchR\x05value:\x028\x01B\x10\n\ttree_type\x12\x03\xf8B\x01\
    B\x13\n\x0cmatcher_type\x12\x03\xf8B\x01:\x08\xd2\xc6\xa4\xe1\x06\x02\
    \x08\x01\"\xe8\x08\n\x0eMatchPredicate\x12T\n\x08or_match\x18\x01\x20\
    \x01(\x0b27.envoy.config.common.matcher.v3.MatchPredicate.MatchSetH\0R\
    \x07orMatch\x12V\n\tand_match\x18\x02\x20\x01(\x0b27.envoy.config.common\
    .matcher.v3.MatchPredicate.MatchSetH\0R\x08andMatch\x12M\n\tnot_match\
    \x18\x03\x20\x01(\x0b2..envoy.config.common.matcher.v3.MatchPredicateH\0\
    R\x08notMatch\x12&\n\tany_match\x18\x04\x20\x01(\x08H\0R\x08anyMatchB\
    \x07\xfaB\x04j\x02\x08\x01\x12o\n\x1ahttp_request_headers_match\x18\x05\
    \x20\x01(\x0b20.envoy.config.common.matcher.v3.HttpHeadersMatchH\0R\x17h\
    ttpRequestHeadersMatch\x12q\n\x1bhttp_request_trailers_match\x18\x06\x20\
    \x01(\x0b20.envoy.config.common.matcher.v3.HttpHeadersMatchH\0R\x18httpR\
    equestTrailersMatch\x12q\n\x1bhttp_response_headers_match\x18\x07\x20\
    \x01(\x0b20.envoy.config.common.matcher.v3.HttpHeadersMatchH\0R\x18httpR\
    esponseHeadersMatch\x12s\n\x1chttp_response_trailers_match\x18\x08\x20\
    \x01(\x0b20.envoy.config.common.matcher.v3.HttpHeadersMatchH\0R\x19httpR\
    esponseTrailersMatch\x12|\n\x1fhttp_request_generic_body_match\x18\t\x20\
    \x01(\x0b24.envoy.config.common.matcher.v3.HttpGenericBodyMatchH\0R\x1bh\
    ttpRequestGenericBodyMatch\x12~\n\x20http_response_generic_body_match\
    \x18\n\x20\x01(\x0b24.envoy.config.common.matcher.v3.HttpGenericBodyMatc\
    hH\0R\x1chttpResponseGenericBodyMatch\x1aZ\n\x08MatchSet\x12N\n\x05rules\
    \x18\x01\x20\x03(\x0b2..envoy.config.common.matcher.v3.MatchPredicateR\
    \x05rulesB\x08\xfaB\x05\x92\x01\x02\x08\x02B\x0b\n\x04rule\x12\x03\xf8B\
    \x01\"R\n\x10HttpHeadersMatch\x12>\n\x07headers\x18\x01\x20\x03(\x0b2$.e\
    nvoy.config.route.v3.HeaderMatcherR\x07headers\"\xa1\x02\n\x14HttpGeneri\
    cBodyMatch\x12\x1f\n\x0bbytes_limit\x18\x01\x20\x01(\rR\nbytesLimit\x12k\
    \n\x08patterns\x18\x02\x20\x03(\x0b2E.envoy.config.common.matcher.v3.Htt\
    pGenericBodyMatch.GenericTextMatchR\x08patternsB\x08\xfaB\x05\x92\x01\
    \x02\x08\x01\x1a{\n\x10GenericTextMatch\x12,\n\x0cstring_match\x18\x01\
    \x20\x01(\tH\0R\x0bstringMatchB\x07\xfaB\x04r\x02\x10\x01\x12,\n\x0cbina\
    ry_match\x18\x02\x20\x01(\x0cH\0R\x0bbinaryMatchB\x07\xfaB\x04z\x02\x10\
    \x01B\x0b\n\x04rule\x12\x03\xf8B\x01BF\n,io.envoyproxy.envoy.config.comm\
    on.matcher.v3B\x0cMatcherProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06\
    proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
