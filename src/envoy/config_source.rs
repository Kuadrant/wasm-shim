// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/core/v3/config_source.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ApiConfigSource {
    // message fields
    pub api_type: ApiConfigSource_ApiType,
    pub transport_api_version: ApiVersion,
    pub cluster_names: ::protobuf::RepeatedField<::std::string::String>,
    pub grpc_services: ::protobuf::RepeatedField<super::grpc_service::GrpcService>,
    pub refresh_delay: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub request_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub rate_limit_settings: ::protobuf::SingularPtrField<RateLimitSettings>,
    pub set_node_on_first_message_only: bool,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ApiConfigSource {
    fn default() -> &'a ApiConfigSource {
        <ApiConfigSource as ::protobuf::Message>::default_instance()
    }
}

impl ApiConfigSource {
    pub fn new() -> ApiConfigSource {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.ApiConfigSource.ApiType api_type = 1;


    pub fn get_api_type(&self) -> ApiConfigSource_ApiType {
        self.api_type
    }
    pub fn clear_api_type(&mut self) {
        self.api_type = ApiConfigSource_ApiType::DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE;
    }

    // Param is passed by value, moved
    pub fn set_api_type(&mut self, v: ApiConfigSource_ApiType) {
        self.api_type = v;
    }

    // .envoy.config.core.v3.ApiVersion transport_api_version = 8;


    pub fn get_transport_api_version(&self) -> ApiVersion {
        self.transport_api_version
    }
    pub fn clear_transport_api_version(&mut self) {
        self.transport_api_version = ApiVersion::AUTO;
    }

    // Param is passed by value, moved
    pub fn set_transport_api_version(&mut self, v: ApiVersion) {
        self.transport_api_version = v;
    }

    // repeated string cluster_names = 2;


    pub fn get_cluster_names(&self) -> &[::std::string::String] {
        &self.cluster_names
    }
    pub fn clear_cluster_names(&mut self) {
        self.cluster_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cluster_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cluster_names
    }

    // Take field
    pub fn take_cluster_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cluster_names, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.config.core.v3.GrpcService grpc_services = 4;


    pub fn get_grpc_services(&self) -> &[super::grpc_service::GrpcService] {
        &self.grpc_services
    }
    pub fn clear_grpc_services(&mut self) {
        self.grpc_services.clear();
    }

    // Param is passed by value, moved
    pub fn set_grpc_services(&mut self, v: ::protobuf::RepeatedField<super::grpc_service::GrpcService>) {
        self.grpc_services = v;
    }

    // Mutable pointer to the field.
    pub fn mut_grpc_services(&mut self) -> &mut ::protobuf::RepeatedField<super::grpc_service::GrpcService> {
        &mut self.grpc_services
    }

    // Take field
    pub fn take_grpc_services(&mut self) -> ::protobuf::RepeatedField<super::grpc_service::GrpcService> {
        ::std::mem::replace(&mut self.grpc_services, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Duration refresh_delay = 3;


    pub fn get_refresh_delay(&self) -> &::protobuf::well_known_types::Duration {
        self.refresh_delay.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_refresh_delay(&mut self) {
        self.refresh_delay.clear();
    }

    pub fn has_refresh_delay(&self) -> bool {
        self.refresh_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_delay(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.refresh_delay = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_delay(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.refresh_delay.is_none() {
            self.refresh_delay.set_default();
        }
        self.refresh_delay.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_delay(&mut self) -> ::protobuf::well_known_types::Duration {
        self.refresh_delay.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration request_timeout = 5;


    pub fn get_request_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.request_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_timeout(&mut self) {
        self.request_timeout.clear();
    }

    pub fn has_request_timeout(&self) -> bool {
        self.request_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.request_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.request_timeout.is_none() {
            self.request_timeout.set_default();
        }
        self.request_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.request_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.config.core.v3.RateLimitSettings rate_limit_settings = 6;


    pub fn get_rate_limit_settings(&self) -> &RateLimitSettings {
        self.rate_limit_settings.as_ref().unwrap_or_else(|| <RateLimitSettings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rate_limit_settings(&mut self) {
        self.rate_limit_settings.clear();
    }

    pub fn has_rate_limit_settings(&self) -> bool {
        self.rate_limit_settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rate_limit_settings(&mut self, v: RateLimitSettings) {
        self.rate_limit_settings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rate_limit_settings(&mut self) -> &mut RateLimitSettings {
        if self.rate_limit_settings.is_none() {
            self.rate_limit_settings.set_default();
        }
        self.rate_limit_settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_rate_limit_settings(&mut self) -> RateLimitSettings {
        self.rate_limit_settings.take().unwrap_or_else(|| RateLimitSettings::new())
    }

    // bool set_node_on_first_message_only = 7;


    pub fn get_set_node_on_first_message_only(&self) -> bool {
        self.set_node_on_first_message_only
    }
    pub fn clear_set_node_on_first_message_only(&mut self) {
        self.set_node_on_first_message_only = false;
    }

    // Param is passed by value, moved
    pub fn set_set_node_on_first_message_only(&mut self, v: bool) {
        self.set_node_on_first_message_only = v;
    }
}

impl ::protobuf::Message for ApiConfigSource {
    fn is_initialized(&self) -> bool {
        for v in &self.grpc_services {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.refresh_delay {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rate_limit_settings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.api_type, 1, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.transport_api_version, 8, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cluster_names)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.grpc_services)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.refresh_delay)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_timeout)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rate_limit_settings)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.set_node_on_first_message_only = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.api_type != ApiConfigSource_ApiType::DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE {
            my_size += ::protobuf::rt::enum_size(1, self.api_type);
        }
        if self.transport_api_version != ApiVersion::AUTO {
            my_size += ::protobuf::rt::enum_size(8, self.transport_api_version);
        }
        for value in &self.cluster_names {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.grpc_services {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.refresh_delay.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rate_limit_settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.set_node_on_first_message_only != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.api_type != ApiConfigSource_ApiType::DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.api_type))?;
        }
        if self.transport_api_version != ApiVersion::AUTO {
            os.write_enum(8, ::protobuf::ProtobufEnum::value(&self.transport_api_version))?;
        }
        for v in &self.cluster_names {
            os.write_string(2, &v)?;
        };
        for v in &self.grpc_services {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.refresh_delay.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_timeout.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rate_limit_settings.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.set_node_on_first_message_only != false {
            os.write_bool(7, self.set_node_on_first_message_only)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ApiConfigSource {
        ApiConfigSource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ApiConfigSource_ApiType>>(
                "api_type",
                |m: &ApiConfigSource| { &m.api_type },
                |m: &mut ApiConfigSource| { &mut m.api_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ApiVersion>>(
                "transport_api_version",
                |m: &ApiConfigSource| { &m.transport_api_version },
                |m: &mut ApiConfigSource| { &mut m.transport_api_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_names",
                |m: &ApiConfigSource| { &m.cluster_names },
                |m: &mut ApiConfigSource| { &mut m.cluster_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::grpc_service::GrpcService>>(
                "grpc_services",
                |m: &ApiConfigSource| { &m.grpc_services },
                |m: &mut ApiConfigSource| { &mut m.grpc_services },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "refresh_delay",
                |m: &ApiConfigSource| { &m.refresh_delay },
                |m: &mut ApiConfigSource| { &mut m.refresh_delay },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "request_timeout",
                |m: &ApiConfigSource| { &m.request_timeout },
                |m: &mut ApiConfigSource| { &mut m.request_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RateLimitSettings>>(
                "rate_limit_settings",
                |m: &ApiConfigSource| { &m.rate_limit_settings },
                |m: &mut ApiConfigSource| { &mut m.rate_limit_settings },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "set_node_on_first_message_only",
                |m: &ApiConfigSource| { &m.set_node_on_first_message_only },
                |m: &mut ApiConfigSource| { &mut m.set_node_on_first_message_only },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ApiConfigSource>(
                "ApiConfigSource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ApiConfigSource {
        static instance: ::protobuf::rt::LazyV2<ApiConfigSource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ApiConfigSource::new)
    }
}

impl ::protobuf::Clear for ApiConfigSource {
    fn clear(&mut self) {
        self.api_type = ApiConfigSource_ApiType::DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE;
        self.transport_api_version = ApiVersion::AUTO;
        self.cluster_names.clear();
        self.grpc_services.clear();
        self.refresh_delay.clear();
        self.request_timeout.clear();
        self.rate_limit_settings.clear();
        self.set_node_on_first_message_only = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ApiConfigSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiConfigSource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ApiConfigSource_ApiType {
    DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE = 0,
    REST = 1,
    GRPC = 2,
    DELTA_GRPC = 3,
    AGGREGATED_GRPC = 5,
    AGGREGATED_DELTA_GRPC = 6,
}

impl ::protobuf::ProtobufEnum for ApiConfigSource_ApiType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ApiConfigSource_ApiType> {
        match value {
            0 => ::std::option::Option::Some(ApiConfigSource_ApiType::DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE),
            1 => ::std::option::Option::Some(ApiConfigSource_ApiType::REST),
            2 => ::std::option::Option::Some(ApiConfigSource_ApiType::GRPC),
            3 => ::std::option::Option::Some(ApiConfigSource_ApiType::DELTA_GRPC),
            5 => ::std::option::Option::Some(ApiConfigSource_ApiType::AGGREGATED_GRPC),
            6 => ::std::option::Option::Some(ApiConfigSource_ApiType::AGGREGATED_DELTA_GRPC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ApiConfigSource_ApiType] = &[
            ApiConfigSource_ApiType::DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE,
            ApiConfigSource_ApiType::REST,
            ApiConfigSource_ApiType::GRPC,
            ApiConfigSource_ApiType::DELTA_GRPC,
            ApiConfigSource_ApiType::AGGREGATED_GRPC,
            ApiConfigSource_ApiType::AGGREGATED_DELTA_GRPC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ApiConfigSource_ApiType>("ApiConfigSource.ApiType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ApiConfigSource_ApiType {
}

impl ::std::default::Default for ApiConfigSource_ApiType {
    fn default() -> Self {
        ApiConfigSource_ApiType::DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiConfigSource_ApiType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct AggregatedConfigSource {
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AggregatedConfigSource {
    fn default() -> &'a AggregatedConfigSource {
        <AggregatedConfigSource as ::protobuf::Message>::default_instance()
    }
}

impl AggregatedConfigSource {
    pub fn new() -> AggregatedConfigSource {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for AggregatedConfigSource {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AggregatedConfigSource {
        AggregatedConfigSource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AggregatedConfigSource>(
                "AggregatedConfigSource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AggregatedConfigSource {
        static instance: ::protobuf::rt::LazyV2<AggregatedConfigSource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AggregatedConfigSource::new)
    }
}

impl ::protobuf::Clear for AggregatedConfigSource {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AggregatedConfigSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AggregatedConfigSource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct SelfConfigSource {
    // message fields
    pub transport_api_version: ApiVersion,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SelfConfigSource {
    fn default() -> &'a SelfConfigSource {
        <SelfConfigSource as ::protobuf::Message>::default_instance()
    }
}

impl SelfConfigSource {
    pub fn new() -> SelfConfigSource {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.ApiVersion transport_api_version = 1;


    pub fn get_transport_api_version(&self) -> ApiVersion {
        self.transport_api_version
    }
    pub fn clear_transport_api_version(&mut self) {
        self.transport_api_version = ApiVersion::AUTO;
    }

    // Param is passed by value, moved
    pub fn set_transport_api_version(&mut self, v: ApiVersion) {
        self.transport_api_version = v;
    }
}

impl ::protobuf::Message for SelfConfigSource {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.transport_api_version, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.transport_api_version != ApiVersion::AUTO {
            my_size += ::protobuf::rt::enum_size(1, self.transport_api_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.transport_api_version != ApiVersion::AUTO {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.transport_api_version))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SelfConfigSource {
        SelfConfigSource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ApiVersion>>(
                "transport_api_version",
                |m: &SelfConfigSource| { &m.transport_api_version },
                |m: &mut SelfConfigSource| { &mut m.transport_api_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SelfConfigSource>(
                "SelfConfigSource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SelfConfigSource {
        static instance: ::protobuf::rt::LazyV2<SelfConfigSource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SelfConfigSource::new)
    }
}

impl ::protobuf::Clear for SelfConfigSource {
    fn clear(&mut self) {
        self.transport_api_version = ApiVersion::AUTO;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SelfConfigSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SelfConfigSource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct RateLimitSettings {
    // message fields
    pub max_tokens: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub fill_rate: ::protobuf::SingularPtrField<::protobuf::well_known_types::DoubleValue>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RateLimitSettings {
    fn default() -> &'a RateLimitSettings {
        <RateLimitSettings as ::protobuf::Message>::default_instance()
    }
}

impl RateLimitSettings {
    pub fn new() -> RateLimitSettings {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value max_tokens = 1;


    pub fn get_max_tokens(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_tokens.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_tokens(&mut self) {
        self.max_tokens.clear();
    }

    pub fn has_max_tokens(&self) -> bool {
        self.max_tokens.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_tokens(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_tokens = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_tokens(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_tokens.is_none() {
            self.max_tokens.set_default();
        }
        self.max_tokens.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_tokens(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_tokens.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.DoubleValue fill_rate = 2;


    pub fn get_fill_rate(&self) -> &::protobuf::well_known_types::DoubleValue {
        self.fill_rate.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::DoubleValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_fill_rate(&mut self) {
        self.fill_rate.clear();
    }

    pub fn has_fill_rate(&self) -> bool {
        self.fill_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_fill_rate(&mut self, v: ::protobuf::well_known_types::DoubleValue) {
        self.fill_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fill_rate(&mut self) -> &mut ::protobuf::well_known_types::DoubleValue {
        if self.fill_rate.is_none() {
            self.fill_rate.set_default();
        }
        self.fill_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_fill_rate(&mut self) -> ::protobuf::well_known_types::DoubleValue {
        self.fill_rate.take().unwrap_or_else(|| ::protobuf::well_known_types::DoubleValue::new())
    }
}

impl ::protobuf::Message for RateLimitSettings {
    fn is_initialized(&self) -> bool {
        for v in &self.max_tokens {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.fill_rate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_tokens)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.fill_rate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.max_tokens.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.fill_rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.max_tokens.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.fill_rate.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RateLimitSettings {
        RateLimitSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_tokens",
                |m: &RateLimitSettings| { &m.max_tokens },
                |m: &mut RateLimitSettings| { &mut m.max_tokens },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::DoubleValue>>(
                "fill_rate",
                |m: &RateLimitSettings| { &m.fill_rate },
                |m: &mut RateLimitSettings| { &mut m.fill_rate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RateLimitSettings>(
                "RateLimitSettings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RateLimitSettings {
        static instance: ::protobuf::rt::LazyV2<RateLimitSettings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RateLimitSettings::new)
    }
}

impl ::protobuf::Clear for RateLimitSettings {
    fn clear(&mut self) {
        self.max_tokens.clear();
        self.fill_rate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RateLimitSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ConfigSource {
    // message fields
    pub authorities: ::protobuf::RepeatedField<super::authority::Authority>,
    pub initial_fetch_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub resource_api_version: ApiVersion,
    // message oneof groups
    pub config_source_specifier: ::std::option::Option<ConfigSource_oneof_config_source_specifier>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConfigSource {
    fn default() -> &'a ConfigSource {
        <ConfigSource as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ConfigSource_oneof_config_source_specifier {
    path(::std::string::String),
    api_config_source(ApiConfigSource),
    ads(AggregatedConfigSource),
    field_self(SelfConfigSource),
}

impl ConfigSource {
    pub fn new() -> ConfigSource {
        ::std::default::Default::default()
    }

    // repeated .xds.core.v3.Authority authorities = 7;


    pub fn get_authorities(&self) -> &[super::authority::Authority] {
        &self.authorities
    }
    pub fn clear_authorities(&mut self) {
        self.authorities.clear();
    }

    // Param is passed by value, moved
    pub fn set_authorities(&mut self, v: ::protobuf::RepeatedField<super::authority::Authority>) {
        self.authorities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_authorities(&mut self) -> &mut ::protobuf::RepeatedField<super::authority::Authority> {
        &mut self.authorities
    }

    // Take field
    pub fn take_authorities(&mut self) -> ::protobuf::RepeatedField<super::authority::Authority> {
        ::std::mem::replace(&mut self.authorities, ::protobuf::RepeatedField::new())
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::path(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_path(&mut self) {
        self.config_source_specifier = ::std::option::Option::None;
    }

    pub fn has_path(&self) -> bool {
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::path(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::path(v))
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::path(_)) = self.config_source_specifier {
        } else {
            self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::path(::std::string::String::new()));
        }
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::path(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        if self.has_path() {
            match self.config_source_specifier.take() {
                ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::path(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.config.core.v3.ApiConfigSource api_config_source = 2;


    pub fn get_api_config_source(&self) -> &ApiConfigSource {
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::api_config_source(ref v)) => v,
            _ => <ApiConfigSource as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_api_config_source(&mut self) {
        self.config_source_specifier = ::std::option::Option::None;
    }

    pub fn has_api_config_source(&self) -> bool {
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::api_config_source(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_api_config_source(&mut self, v: ApiConfigSource) {
        self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::api_config_source(v))
    }

    // Mutable pointer to the field.
    pub fn mut_api_config_source(&mut self) -> &mut ApiConfigSource {
        if let ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::api_config_source(_)) = self.config_source_specifier {
        } else {
            self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::api_config_source(ApiConfigSource::new()));
        }
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::api_config_source(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_api_config_source(&mut self) -> ApiConfigSource {
        if self.has_api_config_source() {
            match self.config_source_specifier.take() {
                ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::api_config_source(v)) => v,
                _ => panic!(),
            }
        } else {
            ApiConfigSource::new()
        }
    }

    // .envoy.config.core.v3.AggregatedConfigSource ads = 3;


    pub fn get_ads(&self) -> &AggregatedConfigSource {
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::ads(ref v)) => v,
            _ => <AggregatedConfigSource as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ads(&mut self) {
        self.config_source_specifier = ::std::option::Option::None;
    }

    pub fn has_ads(&self) -> bool {
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::ads(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ads(&mut self, v: AggregatedConfigSource) {
        self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::ads(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ads(&mut self) -> &mut AggregatedConfigSource {
        if let ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::ads(_)) = self.config_source_specifier {
        } else {
            self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::ads(AggregatedConfigSource::new()));
        }
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::ads(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ads(&mut self) -> AggregatedConfigSource {
        if self.has_ads() {
            match self.config_source_specifier.take() {
                ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::ads(v)) => v,
                _ => panic!(),
            }
        } else {
            AggregatedConfigSource::new()
        }
    }

    // .envoy.config.core.v3.SelfConfigSource self = 5;


    pub fn get_field_self(&self) -> &SelfConfigSource {
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::field_self(ref v)) => v,
            _ => <SelfConfigSource as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_field_self(&mut self) {
        self.config_source_specifier = ::std::option::Option::None;
    }

    pub fn has_field_self(&self) -> bool {
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::field_self(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_self(&mut self, v: SelfConfigSource) {
        self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::field_self(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_self(&mut self) -> &mut SelfConfigSource {
        if let ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::field_self(_)) = self.config_source_specifier {
        } else {
            self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::field_self(SelfConfigSource::new()));
        }
        match self.config_source_specifier {
            ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::field_self(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_self(&mut self) -> SelfConfigSource {
        if self.has_field_self() {
            match self.config_source_specifier.take() {
                ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::field_self(v)) => v,
                _ => panic!(),
            }
        } else {
            SelfConfigSource::new()
        }
    }

    // .google.protobuf.Duration initial_fetch_timeout = 4;


    pub fn get_initial_fetch_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.initial_fetch_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_initial_fetch_timeout(&mut self) {
        self.initial_fetch_timeout.clear();
    }

    pub fn has_initial_fetch_timeout(&self) -> bool {
        self.initial_fetch_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_fetch_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.initial_fetch_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_fetch_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.initial_fetch_timeout.is_none() {
            self.initial_fetch_timeout.set_default();
        }
        self.initial_fetch_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_initial_fetch_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.initial_fetch_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.config.core.v3.ApiVersion resource_api_version = 6;


    pub fn get_resource_api_version(&self) -> ApiVersion {
        self.resource_api_version
    }
    pub fn clear_resource_api_version(&mut self) {
        self.resource_api_version = ApiVersion::AUTO;
    }

    // Param is passed by value, moved
    pub fn set_resource_api_version(&mut self, v: ApiVersion) {
        self.resource_api_version = v;
    }
}

impl ::protobuf::Message for ConfigSource {
    fn is_initialized(&self) -> bool {
        for v in &self.authorities {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(ConfigSource_oneof_config_source_specifier::api_config_source(ref v)) = self.config_source_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ConfigSource_oneof_config_source_specifier::ads(ref v)) = self.config_source_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ConfigSource_oneof_config_source_specifier::field_self(ref v)) = self.config_source_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.initial_fetch_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.authorities)?;
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::path(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::api_config_source(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::ads(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_source_specifier = ::std::option::Option::Some(ConfigSource_oneof_config_source_specifier::field_self(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.initial_fetch_timeout)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.resource_api_version, 6, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.authorities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.initial_fetch_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.resource_api_version != ApiVersion::AUTO {
            my_size += ::protobuf::rt::enum_size(6, self.resource_api_version);
        }
        if let ::std::option::Option::Some(ref v) = self.config_source_specifier {
            match v {
                &ConfigSource_oneof_config_source_specifier::path(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &ConfigSource_oneof_config_source_specifier::api_config_source(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ConfigSource_oneof_config_source_specifier::ads(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ConfigSource_oneof_config_source_specifier::field_self(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.authorities {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.initial_fetch_timeout.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.resource_api_version != ApiVersion::AUTO {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.resource_api_version))?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_source_specifier {
            match v {
                &ConfigSource_oneof_config_source_specifier::path(ref v) => {
                    os.write_string(1, v)?;
                },
                &ConfigSource_oneof_config_source_specifier::api_config_source(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ConfigSource_oneof_config_source_specifier::ads(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ConfigSource_oneof_config_source_specifier::field_self(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConfigSource {
        ConfigSource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::authority::Authority>>(
                "authorities",
                |m: &ConfigSource| { &m.authorities },
                |m: &mut ConfigSource| { &mut m.authorities },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "path",
                ConfigSource::has_path,
                ConfigSource::get_path,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ApiConfigSource>(
                "api_config_source",
                ConfigSource::has_api_config_source,
                ConfigSource::get_api_config_source,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AggregatedConfigSource>(
                "ads",
                ConfigSource::has_ads,
                ConfigSource::get_ads,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SelfConfigSource>(
                "self",
                ConfigSource::has_field_self,
                ConfigSource::get_field_self,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "initial_fetch_timeout",
                |m: &ConfigSource| { &m.initial_fetch_timeout },
                |m: &mut ConfigSource| { &mut m.initial_fetch_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ApiVersion>>(
                "resource_api_version",
                |m: &ConfigSource| { &m.resource_api_version },
                |m: &mut ConfigSource| { &mut m.resource_api_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConfigSource>(
                "ConfigSource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConfigSource {
        static instance: ::protobuf::rt::LazyV2<ConfigSource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConfigSource::new)
    }
}

impl ::protobuf::Clear for ConfigSource {
    fn clear(&mut self) {
        self.authorities.clear();
        self.config_source_specifier = ::std::option::Option::None;
        self.config_source_specifier = ::std::option::Option::None;
        self.config_source_specifier = ::std::option::Option::None;
        self.config_source_specifier = ::std::option::Option::None;
        self.initial_fetch_timeout.clear();
        self.resource_api_version = ApiVersion::AUTO;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConfigSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfigSource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ApiVersion {
    AUTO = 0,
    V2 = 1,
    V3 = 2,
}

impl ::protobuf::ProtobufEnum for ApiVersion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ApiVersion> {
        match value {
            0 => ::std::option::Option::Some(ApiVersion::AUTO),
            1 => ::std::option::Option::Some(ApiVersion::V2),
            2 => ::std::option::Option::Some(ApiVersion::V3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ApiVersion] = &[
            ApiVersion::AUTO,
            ApiVersion::V2,
            ApiVersion::V3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ApiVersion>("ApiVersion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ApiVersion {
}

impl ::std::default::Default for ApiVersion {
    fn default() -> Self {
        ApiVersion::AUTO
    }
}

impl ::protobuf::reflect::ProtobufValue for ApiVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(envoy/config/core/v3/config_source.proto\x12\x14envoy.config.core.v3\
    \x1a'envoy/config/core/v3/grpc_service.proto\x1a\x1egoogle/protobuf/dura\
    tion.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1bxds/core/v3/auth\
    ority.proto\x1a#envoy/annotations/deprecation.proto\x1a\x1dudpa/annotati\
    ons/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/v\
    alidate.proto\"\x9b\x06\n\x0fApiConfigSource\x12R\n\x08api_type\x18\x01\
    \x20\x01(\x0e2-.envoy.config.core.v3.ApiConfigSource.ApiTypeR\x07apiType\
    B\x08\xfaB\x05\x82\x01\x02\x10\x01\x12^\n\x15transport_api_version\x18\
    \x08\x20\x01(\x0e2\x20.envoy.config.core.v3.ApiVersionR\x13transportApiV\
    ersionB\x08\xfaB\x05\x82\x01\x02\x10\x01\x12#\n\rcluster_names\x18\x02\
    \x20\x03(\tR\x0cclusterNames\x12F\n\rgrpc_services\x18\x04\x20\x03(\x0b2\
    !.envoy.config.core.v3.GrpcServiceR\x0cgrpcServices\x12>\n\rrefresh_dela\
    y\x18\x03\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0crefreshDelay\
    \x12L\n\x0frequest_timeout\x18\x05\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationR\x0erequestTimeoutB\x08\xfaB\x05\xaa\x01\x02*\0\x12W\n\x13rate_lim\
    it_settings\x18\x06\x20\x01(\x0b2'.envoy.config.core.v3.RateLimitSetting\
    sR\x11rateLimitSettings\x12A\n\x1eset_node_on_first_message_only\x18\x07\
    \x20\x01(\x08R\x19setNodeOnFirstMessageOnly\"\x92\x01\n\x07ApiType\x123\
    \n%DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE\x10\0\x1a\x08\x08\x01\xa8\xf7\
    \xb4\x8b\x02\x01\x12\x08\n\x04REST\x10\x01\x12\x08\n\x04GRPC\x10\x02\x12\
    \x0e\n\nDELTA_GRPC\x10\x03\x12\x13\n\x0fAGGREGATED_GRPC\x10\x05\x12\x19\
    \n\x15AGGREGATED_DELTA_GRPC\x10\x06:(\x9a\xc5\x88\x1e#\n!envoy.api.v2.co\
    re.ApiConfigSource\"I\n\x16AggregatedConfigSource:/\x9a\xc5\x88\x1e*\n(e\
    nvoy.api.v2.core.AggregatedConfigSource\"\x9d\x01\n\x10SelfConfigSource\
    \x12^\n\x15transport_api_version\x18\x01\x20\x01(\x0e2\x20.envoy.config.\
    core.v3.ApiVersionR\x13transportApiVersionB\x08\xfaB\x05\x82\x01\x02\x10\
    \x01:)\x9a\xc5\x88\x1e$\n\"envoy.api.v2.core.SelfConfigSource\"\xc7\x01\
    \n\x11RateLimitSettings\x12;\n\nmax_tokens\x18\x01\x20\x01(\x0b2\x1c.goo\
    gle.protobuf.UInt32ValueR\tmaxTokens\x12I\n\tfill_rate\x18\x02\x20\x01(\
    \x0b2\x1c.google.protobuf.DoubleValueR\x08fillRateB\x0e\xfaB\x0b\x12\t!\
    \0\0\0\0\0\0\0\0:*\x9a\xc5\x88\x1e%\n#envoy.api.v2.core.RateLimitSetting\
    s\"\xa7\x04\n\x0cConfigSource\x128\n\x0bauthorities\x18\x07\x20\x03(\x0b\
    2\x16.xds.core.v3.AuthorityR\x0bauthorities\x12\x14\n\x04path\x18\x01\
    \x20\x01(\tH\0R\x04path\x12S\n\x11api_config_source\x18\x02\x20\x01(\x0b\
    2%.envoy.config.core.v3.ApiConfigSourceH\0R\x0fapiConfigSource\x12@\n\
    \x03ads\x18\x03\x20\x01(\x0b2,.envoy.config.core.v3.AggregatedConfigSour\
    ceH\0R\x03ads\x12<\n\x04self\x18\x05\x20\x01(\x0b2&.envoy.config.core.v3\
    .SelfConfigSourceH\0R\x04self\x12M\n\x15initial_fetch_timeout\x18\x04\
    \x20\x01(\x0b2\x19.google.protobuf.DurationR\x13initialFetchTimeout\x12\
    \\\n\x14resource_api_version\x18\x06\x20\x01(\x0e2\x20.envoy.config.core\
    .v3.ApiVersionR\x12resourceApiVersionB\x08\xfaB\x05\x82\x01\x02\x10\x01B\
    \x1e\n\x17config_source_specifier\x12\x03\xf8B\x01:%\x9a\xc5\x88\x1e\x20\
    \n\x1eenvoy.api.v2.core.ConfigSource*@\n\nApiVersion\x12\x15\n\x04AUTO\
    \x10\0\x1a\x0b\x08\x01\x8a\xf4\x9b\xb3\x05\x033.0\x12\x13\n\x02V2\x10\
    \x01\x1a\x0b\x08\x01\x8a\xf4\x9b\xb3\x05\x033.0\x12\x06\n\x02V3\x10\x02B\
    A\n\"io.envoyproxy.envoy.config.core.v3B\x11ConfigSourceProtoP\x01\xba\
    \x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
