// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/type/matcher/v3/number.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct DoubleMatcher {
    // message oneof groups
    pub match_pattern: ::std::option::Option<DoubleMatcher_oneof_match_pattern>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DoubleMatcher {
    fn default() -> &'a DoubleMatcher {
        <DoubleMatcher as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum DoubleMatcher_oneof_match_pattern {
    range(super::range::DoubleRange),
    exact(f64),
}

impl DoubleMatcher {
    pub fn new() -> DoubleMatcher {
        ::std::default::Default::default()
    }

    // .envoy.type.v3.DoubleRange range = 1;


    pub fn get_range(&self) -> &super::range::DoubleRange {
        match self.match_pattern {
            ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::range(ref v)) => v,
            _ => <super::range::DoubleRange as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_range(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_range(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::range(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: super::range::DoubleRange) {
        self.match_pattern = ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::range(v))
    }

    // Mutable pointer to the field.
    pub fn mut_range(&mut self) -> &mut super::range::DoubleRange {
        if let ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::range(_)) = self.match_pattern {
        } else {
            self.match_pattern = ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::range(super::range::DoubleRange::new()));
        }
        match self.match_pattern {
            ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::range(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_range(&mut self) -> super::range::DoubleRange {
        if self.has_range() {
            match self.match_pattern.take() {
                ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::range(v)) => v,
                _ => panic!(),
            }
        } else {
            super::range::DoubleRange::new()
        }
    }

    // double exact = 2;


    pub fn get_exact(&self) -> f64 {
        match self.match_pattern {
            ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::exact(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_exact(&mut self) {
        self.match_pattern = ::std::option::Option::None;
    }

    pub fn has_exact(&self) -> bool {
        match self.match_pattern {
            ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::exact(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exact(&mut self, v: f64) {
        self.match_pattern = ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::exact(v))
    }
}

impl ::protobuf::Message for DoubleMatcher {
    fn is_initialized(&self) -> bool {
        if let Some(DoubleMatcher_oneof_match_pattern::range(ref v)) = self.match_pattern {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::range(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_pattern = ::std::option::Option::Some(DoubleMatcher_oneof_match_pattern::exact(is.read_double()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.match_pattern {
            match v {
                &DoubleMatcher_oneof_match_pattern::range(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &DoubleMatcher_oneof_match_pattern::exact(v) => {
                    my_size += 9;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.match_pattern {
            match v {
                &DoubleMatcher_oneof_match_pattern::range(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &DoubleMatcher_oneof_match_pattern::exact(v) => {
                    os.write_double(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DoubleMatcher {
        DoubleMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::range::DoubleRange>(
                "range",
                DoubleMatcher::has_range,
                DoubleMatcher::get_range,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "exact",
                DoubleMatcher::has_exact,
                DoubleMatcher::get_exact,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DoubleMatcher>(
                "DoubleMatcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DoubleMatcher {
        static instance: ::protobuf::rt::LazyV2<DoubleMatcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DoubleMatcher::new)
    }
}

impl ::protobuf::Clear for DoubleMatcher {
    fn clear(&mut self) {
        self.match_pattern = ::std::option::Option::None;
        self.match_pattern = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DoubleMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DoubleMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"envoy/type/matcher/v3/number.proto\x12\x15envoy.type.matcher.v3\x1a\
    \x19envoy/type/v3/range.proto\x1a\x1dudpa/annotations/status.proto\x1a!u\
    dpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\x9a\
    \x01\n\rDoubleMatcher\x122\n\x05range\x18\x01\x20\x01(\x0b2\x1a.envoy.ty\
    pe.v3.DoubleRangeH\0R\x05range\x12\x16\n\x05exact\x18\x02\x20\x01(\x01H\
    \0R\x05exactB\x14\n\rmatch_pattern\x12\x03\xf8B\x01:'\x9a\xc5\x88\x1e\"\
    \n\x20envoy.type.matcher.DoubleMatcherB<\n#io.envoyproxy.envoy.type.matc\
    her.v3B\x0bNumberProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
