// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/core/v3/proxy_protocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct ProxyProtocolConfig {
    // message fields
    pub version: ProxyProtocolConfig_Version,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProxyProtocolConfig {
    fn default() -> &'a ProxyProtocolConfig {
        <ProxyProtocolConfig as ::protobuf::Message>::default_instance()
    }
}

impl ProxyProtocolConfig {
    pub fn new() -> ProxyProtocolConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.ProxyProtocolConfig.Version version = 1;


    pub fn get_version(&self) -> ProxyProtocolConfig_Version {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = ProxyProtocolConfig_Version::V1;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ProxyProtocolConfig_Version) {
        self.version = v;
    }
}

impl ::protobuf::Message for ProxyProtocolConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.version, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.version != ProxyProtocolConfig_Version::V1 {
            my_size += ::protobuf::rt::enum_size(1, self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.version != ProxyProtocolConfig_Version::V1 {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.version))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProxyProtocolConfig {
        ProxyProtocolConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ProxyProtocolConfig_Version>>(
                "version",
                |m: &ProxyProtocolConfig| { &m.version },
                |m: &mut ProxyProtocolConfig| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProxyProtocolConfig>(
                "ProxyProtocolConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProxyProtocolConfig {
        static instance: ::protobuf::rt::LazyV2<ProxyProtocolConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProxyProtocolConfig::new)
    }
}

impl ::protobuf::Clear for ProxyProtocolConfig {
    fn clear(&mut self) {
        self.version = ProxyProtocolConfig_Version::V1;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProxyProtocolConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProxyProtocolConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum ProxyProtocolConfig_Version {
    V1 = 0,
    V2 = 1,
}

impl ::protobuf::ProtobufEnum for ProxyProtocolConfig_Version {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ProxyProtocolConfig_Version> {
        match value {
            0 => ::std::option::Option::Some(ProxyProtocolConfig_Version::V1),
            1 => ::std::option::Option::Some(ProxyProtocolConfig_Version::V2),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ProxyProtocolConfig_Version] = &[
            ProxyProtocolConfig_Version::V1,
            ProxyProtocolConfig_Version::V2,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ProxyProtocolConfig_Version>("ProxyProtocolConfig.Version", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ProxyProtocolConfig_Version {
}

impl ::std::default::Default for ProxyProtocolConfig_Version {
    fn default() -> Self {
        ProxyProtocolConfig_Version::V1
    }
}

impl ::protobuf::reflect::ProtobufValue for ProxyProtocolConfig_Version {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)envoy/config/core/v3/proxy_protocol.proto\x12\x14envoy.config.core.v3\
    \x1a\x1dudpa/annotations/status.proto\"}\n\x13ProxyProtocolConfig\x12K\n\
    \x07version\x18\x01\x20\x01(\x0e21.envoy.config.core.v3.ProxyProtocolCon\
    fig.VersionR\x07version\"\x19\n\x07Version\x12\x06\n\x02V1\x10\0\x12\x06\
    \n\x02V2\x10\x01BB\n\"io.envoyproxy.envoy.config.core.v3B\x12ProxyProtoc\
    olProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
