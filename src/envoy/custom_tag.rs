// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/type/tracing/v3/custom_tag.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CustomTag {
    // message fields
    pub tag: ::std::string::String,
    // message oneof groups
    pub field_type: ::std::option::Option<CustomTag_oneof_type>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomTag {
    fn default() -> &'a CustomTag {
        <CustomTag as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub enum CustomTag_oneof_type {
    literal(CustomTag_Literal),
    environment(CustomTag_Environment),
    request_header(CustomTag_Header),
    metadata(CustomTag_Metadata),
}

impl CustomTag {
    pub fn new() -> CustomTag {
        ::std::default::Default::default()
    }

    // string tag = 1;


    pub fn get_tag(&self) -> &str {
        &self.tag
    }
    pub fn clear_tag(&mut self) {
        self.tag.clear();
    }

    // Param is passed by value, moved
    pub fn set_tag(&mut self, v: ::std::string::String) {
        self.tag = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag(&mut self) -> &mut ::std::string::String {
        &mut self.tag
    }

    // Take field
    pub fn take_tag(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tag, ::std::string::String::new())
    }

    // .envoy.type.tracing.v3.CustomTag.Literal literal = 2;


    pub fn get_literal(&self) -> &CustomTag_Literal {
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::literal(ref v)) => v,
            _ => <CustomTag_Literal as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_literal(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_literal(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::literal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_literal(&mut self, v: CustomTag_Literal) {
        self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::literal(v))
    }

    // Mutable pointer to the field.
    pub fn mut_literal(&mut self) -> &mut CustomTag_Literal {
        if let ::std::option::Option::Some(CustomTag_oneof_type::literal(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::literal(CustomTag_Literal::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::literal(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_literal(&mut self) -> CustomTag_Literal {
        if self.has_literal() {
            match self.field_type.take() {
                ::std::option::Option::Some(CustomTag_oneof_type::literal(v)) => v,
                _ => panic!(),
            }
        } else {
            CustomTag_Literal::new()
        }
    }

    // .envoy.type.tracing.v3.CustomTag.Environment environment = 3;


    pub fn get_environment(&self) -> &CustomTag_Environment {
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::environment(ref v)) => v,
            _ => <CustomTag_Environment as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_environment(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_environment(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::environment(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_environment(&mut self, v: CustomTag_Environment) {
        self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::environment(v))
    }

    // Mutable pointer to the field.
    pub fn mut_environment(&mut self) -> &mut CustomTag_Environment {
        if let ::std::option::Option::Some(CustomTag_oneof_type::environment(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::environment(CustomTag_Environment::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::environment(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_environment(&mut self) -> CustomTag_Environment {
        if self.has_environment() {
            match self.field_type.take() {
                ::std::option::Option::Some(CustomTag_oneof_type::environment(v)) => v,
                _ => panic!(),
            }
        } else {
            CustomTag_Environment::new()
        }
    }

    // .envoy.type.tracing.v3.CustomTag.Header request_header = 4;


    pub fn get_request_header(&self) -> &CustomTag_Header {
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::request_header(ref v)) => v,
            _ => <CustomTag_Header as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_request_header(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_request_header(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::request_header(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_request_header(&mut self, v: CustomTag_Header) {
        self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::request_header(v))
    }

    // Mutable pointer to the field.
    pub fn mut_request_header(&mut self) -> &mut CustomTag_Header {
        if let ::std::option::Option::Some(CustomTag_oneof_type::request_header(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::request_header(CustomTag_Header::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::request_header(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_request_header(&mut self) -> CustomTag_Header {
        if self.has_request_header() {
            match self.field_type.take() {
                ::std::option::Option::Some(CustomTag_oneof_type::request_header(v)) => v,
                _ => panic!(),
            }
        } else {
            CustomTag_Header::new()
        }
    }

    // .envoy.type.tracing.v3.CustomTag.Metadata metadata = 5;


    pub fn get_metadata(&self) -> &CustomTag_Metadata {
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::metadata(ref v)) => v,
            _ => <CustomTag_Metadata as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_metadata(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_metadata(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: CustomTag_Metadata) {
        self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut CustomTag_Metadata {
        if let ::std::option::Option::Some(CustomTag_oneof_type::metadata(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::metadata(CustomTag_Metadata::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(CustomTag_oneof_type::metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metadata(&mut self) -> CustomTag_Metadata {
        if self.has_metadata() {
            match self.field_type.take() {
                ::std::option::Option::Some(CustomTag_oneof_type::metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            CustomTag_Metadata::new()
        }
    }
}

impl ::protobuf::Message for CustomTag {
    fn is_initialized(&self) -> bool {
        if let Some(CustomTag_oneof_type::literal(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CustomTag_oneof_type::environment(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CustomTag_oneof_type::request_header(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CustomTag_oneof_type::metadata(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tag)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::literal(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::environment(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::request_header(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(CustomTag_oneof_type::metadata(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tag.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tag);
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &CustomTag_oneof_type::literal(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CustomTag_oneof_type::environment(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CustomTag_oneof_type::request_header(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CustomTag_oneof_type::metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tag.is_empty() {
            os.write_string(1, &self.tag)?;
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &CustomTag_oneof_type::literal(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CustomTag_oneof_type::environment(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CustomTag_oneof_type::request_header(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CustomTag_oneof_type::metadata(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomTag {
        CustomTag::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tag",
                |m: &CustomTag| { &m.tag },
                |m: &mut CustomTag| { &mut m.tag },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CustomTag_Literal>(
                "literal",
                CustomTag::has_literal,
                CustomTag::get_literal,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CustomTag_Environment>(
                "environment",
                CustomTag::has_environment,
                CustomTag::get_environment,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CustomTag_Header>(
                "request_header",
                CustomTag::has_request_header,
                CustomTag::get_request_header,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CustomTag_Metadata>(
                "metadata",
                CustomTag::has_metadata,
                CustomTag::get_metadata,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomTag>(
                "CustomTag",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomTag {
        static instance: ::protobuf::rt::LazyV2<CustomTag> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomTag::new)
    }
}

impl ::protobuf::Clear for CustomTag {
    fn clear(&mut self) {
        self.tag.clear();
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomTag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomTag {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CustomTag_Literal {
    // message fields
    pub value: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomTag_Literal {
    fn default() -> &'a CustomTag_Literal {
        <CustomTag_Literal as ::protobuf::Message>::default_instance()
    }
}

impl CustomTag_Literal {
    pub fn new() -> CustomTag_Literal {
        ::std::default::Default::default()
    }

    // string value = 1;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CustomTag_Literal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomTag_Literal {
        CustomTag_Literal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &CustomTag_Literal| { &m.value },
                |m: &mut CustomTag_Literal| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomTag_Literal>(
                "CustomTag.Literal",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomTag_Literal {
        static instance: ::protobuf::rt::LazyV2<CustomTag_Literal> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomTag_Literal::new)
    }
}

impl ::protobuf::Clear for CustomTag_Literal {
    fn clear(&mut self) {
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomTag_Literal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomTag_Literal {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CustomTag_Environment {
    // message fields
    pub name: ::std::string::String,
    pub default_value: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomTag_Environment {
    fn default() -> &'a CustomTag_Environment {
        <CustomTag_Environment as ::protobuf::Message>::default_instance()
    }
}

impl CustomTag_Environment {
    pub fn new() -> CustomTag_Environment {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string default_value = 2;


    pub fn get_default_value(&self) -> &str {
        &self.default_value
    }
    pub fn clear_default_value(&mut self) {
        self.default_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_default_value(&mut self, v: ::std::string::String) {
        self.default_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_value(&mut self) -> &mut ::std::string::String {
        &mut self.default_value
    }

    // Take field
    pub fn take_default_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.default_value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CustomTag_Environment {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.default_value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.default_value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.default_value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.default_value.is_empty() {
            os.write_string(2, &self.default_value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomTag_Environment {
        CustomTag_Environment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CustomTag_Environment| { &m.name },
                |m: &mut CustomTag_Environment| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "default_value",
                |m: &CustomTag_Environment| { &m.default_value },
                |m: &mut CustomTag_Environment| { &mut m.default_value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomTag_Environment>(
                "CustomTag.Environment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomTag_Environment {
        static instance: ::protobuf::rt::LazyV2<CustomTag_Environment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomTag_Environment::new)
    }
}

impl ::protobuf::Clear for CustomTag_Environment {
    fn clear(&mut self) {
        self.name.clear();
        self.default_value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomTag_Environment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomTag_Environment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CustomTag_Header {
    // message fields
    pub name: ::std::string::String,
    pub default_value: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomTag_Header {
    fn default() -> &'a CustomTag_Header {
        <CustomTag_Header as ::protobuf::Message>::default_instance()
    }
}

impl CustomTag_Header {
    pub fn new() -> CustomTag_Header {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string default_value = 2;


    pub fn get_default_value(&self) -> &str {
        &self.default_value
    }
    pub fn clear_default_value(&mut self) {
        self.default_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_default_value(&mut self, v: ::std::string::String) {
        self.default_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_value(&mut self) -> &mut ::std::string::String {
        &mut self.default_value
    }

    // Take field
    pub fn take_default_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.default_value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CustomTag_Header {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.default_value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.default_value.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.default_value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.default_value.is_empty() {
            os.write_string(2, &self.default_value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomTag_Header {
        CustomTag_Header::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &CustomTag_Header| { &m.name },
                |m: &mut CustomTag_Header| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "default_value",
                |m: &CustomTag_Header| { &m.default_value },
                |m: &mut CustomTag_Header| { &mut m.default_value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomTag_Header>(
                "CustomTag.Header",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomTag_Header {
        static instance: ::protobuf::rt::LazyV2<CustomTag_Header> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomTag_Header::new)
    }
}

impl ::protobuf::Clear for CustomTag_Header {
    fn clear(&mut self) {
        self.name.clear();
        self.default_value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomTag_Header {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomTag_Header {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(::serde::Serialize, ::serde::Deserialize))]
pub struct CustomTag_Metadata {
    // message fields
    pub kind: ::protobuf::SingularPtrField<super::metadata::MetadataKind>,
    pub metadata_key: ::protobuf::SingularPtrField<super::metadata::MetadataKey>,
    pub default_value: ::std::string::String,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CustomTag_Metadata {
    fn default() -> &'a CustomTag_Metadata {
        <CustomTag_Metadata as ::protobuf::Message>::default_instance()
    }
}

impl CustomTag_Metadata {
    pub fn new() -> CustomTag_Metadata {
        ::std::default::Default::default()
    }

    // .envoy.type.metadata.v3.MetadataKind kind = 1;


    pub fn get_kind(&self) -> &super::metadata::MetadataKind {
        self.kind.as_ref().unwrap_or_else(|| <super::metadata::MetadataKind as ::protobuf::Message>::default_instance())
    }
    pub fn clear_kind(&mut self) {
        self.kind.clear();
    }

    pub fn has_kind(&self) -> bool {
        self.kind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: super::metadata::MetadataKind) {
        self.kind = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_kind(&mut self) -> &mut super::metadata::MetadataKind {
        if self.kind.is_none() {
            self.kind.set_default();
        }
        self.kind.as_mut().unwrap()
    }

    // Take field
    pub fn take_kind(&mut self) -> super::metadata::MetadataKind {
        self.kind.take().unwrap_or_else(|| super::metadata::MetadataKind::new())
    }

    // .envoy.type.metadata.v3.MetadataKey metadata_key = 2;


    pub fn get_metadata_key(&self) -> &super::metadata::MetadataKey {
        self.metadata_key.as_ref().unwrap_or_else(|| <super::metadata::MetadataKey as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata_key(&mut self) {
        self.metadata_key.clear();
    }

    pub fn has_metadata_key(&self) -> bool {
        self.metadata_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata_key(&mut self, v: super::metadata::MetadataKey) {
        self.metadata_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata_key(&mut self) -> &mut super::metadata::MetadataKey {
        if self.metadata_key.is_none() {
            self.metadata_key.set_default();
        }
        self.metadata_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata_key(&mut self) -> super::metadata::MetadataKey {
        self.metadata_key.take().unwrap_or_else(|| super::metadata::MetadataKey::new())
    }

    // string default_value = 3;


    pub fn get_default_value(&self) -> &str {
        &self.default_value
    }
    pub fn clear_default_value(&mut self) {
        self.default_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_default_value(&mut self, v: ::std::string::String) {
        self.default_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_value(&mut self) -> &mut ::std::string::String {
        &mut self.default_value
    }

    // Take field
    pub fn take_default_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.default_value, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CustomTag_Metadata {
    fn is_initialized(&self) -> bool {
        for v in &self.kind {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata_key {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.kind)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.default_value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.kind.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.metadata_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.default_value.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.default_value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.kind.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.metadata_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.default_value.is_empty() {
            os.write_string(3, &self.default_value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CustomTag_Metadata {
        CustomTag_Metadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metadata::MetadataKind>>(
                "kind",
                |m: &CustomTag_Metadata| { &m.kind },
                |m: &mut CustomTag_Metadata| { &mut m.kind },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metadata::MetadataKey>>(
                "metadata_key",
                |m: &CustomTag_Metadata| { &m.metadata_key },
                |m: &mut CustomTag_Metadata| { &mut m.metadata_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "default_value",
                |m: &CustomTag_Metadata| { &m.default_value },
                |m: &mut CustomTag_Metadata| { &mut m.default_value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CustomTag_Metadata>(
                "CustomTag.Metadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CustomTag_Metadata {
        static instance: ::protobuf::rt::LazyV2<CustomTag_Metadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CustomTag_Metadata::new)
    }
}

impl ::protobuf::Clear for CustomTag_Metadata {
    fn clear(&mut self) {
        self.kind.clear();
        self.metadata_key.clear();
        self.default_value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CustomTag_Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CustomTag_Metadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&envoy/type/tracing/v3/custom_tag.proto\x12\x15envoy.type.tracing.v3\
    \x1a%envoy/type/metadata/v3/metadata.proto\x1a\x1dudpa/annotations/statu\
    s.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.p\
    roto\"\xd4\x07\n\tCustomTag\x12\x19\n\x03tag\x18\x01\x20\x01(\tR\x03tagB\
    \x07\xfaB\x04r\x02\x10\x01\x12D\n\x07literal\x18\x02\x20\x01(\x0b2(.envo\
    y.type.tracing.v3.CustomTag.LiteralH\0R\x07literal\x12P\n\x0benvironment\
    \x18\x03\x20\x01(\x0b2,.envoy.type.tracing.v3.CustomTag.EnvironmentH\0R\
    \x0benvironment\x12P\n\x0erequest_header\x18\x04\x20\x01(\x0b2'.envoy.ty\
    pe.tracing.v3.CustomTag.HeaderH\0R\rrequestHeader\x12G\n\x08metadata\x18\
    \x05\x20\x01(\x0b2).envoy.type.tracing.v3.CustomTag.MetadataH\0R\x08meta\
    data\x1aX\n\x07Literal\x12\x1d\n\x05value\x18\x01\x20\x01(\tR\x05valueB\
    \x07\xfaB\x04r\x02\x10\x01:.\x9a\xc5\x88\x1e)\n'envoy.type.tracing.v2.Cu\
    stomTag.Literal\x1a\x83\x01\n\x0bEnvironment\x12\x1b\n\x04name\x18\x01\
    \x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\x10\x01\x12#\n\rdefault_value\
    \x18\x02\x20\x01(\tR\x0cdefaultValue:2\x9a\xc5\x88\x1e-\n+envoy.type.tra\
    cing.v2.CustomTag.Environment\x1a\x7f\n\x06Header\x12!\n\x04name\x18\x01\
    \x20\x01(\tR\x04nameB\r\xfaB\nr\x08\x10\x01\xc0\x01\x01\xc8\x01\0\x12#\n\
    \rdefault_value\x18\x02\x20\x01(\tR\x0cdefaultValue:-\x9a\xc5\x88\x1e(\n\
    &envoy.type.tracing.v2.CustomTag.Header\x1a\xe2\x01\n\x08Metadata\x128\n\
    \x04kind\x18\x01\x20\x01(\x0b2$.envoy.type.metadata.v3.MetadataKindR\x04\
    kind\x12F\n\x0cmetadata_key\x18\x02\x20\x01(\x0b2#.envoy.type.metadata.v\
    3.MetadataKeyR\x0bmetadataKey\x12#\n\rdefault_value\x18\x03\x20\x01(\tR\
    \x0cdefaultValue:/\x9a\xc5\x88\x1e*\n(envoy.type.tracing.v2.CustomTag.Me\
    tadataB\x0b\n\x04type\x12\x03\xf8B\x01:&\x9a\xc5\x88\x1e!\n\x1fenvoy.typ\
    e.tracing.v2.CustomTagB?\n#io.envoyproxy.envoy.type.tracing.v3B\x0eCusto\
    mTagProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
