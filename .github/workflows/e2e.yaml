---
name: e2e tests

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['*']
  merge_group:
    types: [ checks_requested ]
  workflow_dispatch:

jobs:
  basic:
    name: Basic integration test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: wasm32-unknown-unknown
    - uses: arduino/setup-protoc@v1
      with:
        version: '3.x'
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target wasm32-unknown-unknown
    - name: Run docker compose
      run: |
        docker compose -f ./e2e/basic/docker-compose.yaml run start_services
    - name: Execute tests in the running services
      run: |
        make -f ./e2e/basic/Makefile test
  remote_address:
    name: Remote address integration test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: wasm32-unknown-unknown
    - uses: arduino/setup-protoc@v1
      with:
        version: '3.x'
    - uses: actions-rs/cargo@v1
      with:
        command: build
        args: --target wasm32-unknown-unknown
    - name: Run docker compose
      run: |
        docker compose -f ./e2e/remote-address/docker-compose.yaml run start_services
    - name: Execute tests in the running services
      run: |
        make -f ./e2e/remote-address/Makefile test
  required-checks:
    name: E2E Tests Required Checks
    # This check adds a list of checks to one job to simplify adding settings to the repo.
    # If a new check is added in this file, and it should be retested on entry to the merge queue,
    # it needs to be added to the list below aka needs: [ existing check 1, existing check 2, new check ].
    needs: [ basic, remote_address ]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo '${{ toJSON(needs) }}' | jq -e 'all(.[]; .result == "success" or .result == "skipped")'
